
SearchAndFindGurra.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000002a  00800100  0000040e  000004a2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000040e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000d2e  0080012a  0080012a  000004cc  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000004cc  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000000e0  00000000  00000000  000004fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000c1b  00000000  00000000  000005dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000333  00000000  00000000  000011f7  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000591  00000000  00000000  0000152a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001e0  00000000  00000000  00001abc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000361  00000000  00000000  00001c9c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000007c4  00000000  00000000  00001ffd  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000c0  00000000  00000000  000027c1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ee e0       	ldi	r30, 0x0E	; 14
  a0:	f4 e0       	ldi	r31, 0x04	; 4
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	aa 32       	cpi	r26, 0x2A	; 42
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	2e e0       	ldi	r18, 0x0E	; 14
  b4:	aa e2       	ldi	r26, 0x2A	; 42
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a8 35       	cpi	r26, 0x58	; 88
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	02 d0       	rcall	.+4      	; 0xc8 <main>
  c4:	a2 c1       	rjmp	.+836    	; 0x40a <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <main>:
#include <avr/io.h>
#include "SearchAndFindGurra.h"

int main(void)
{
	xpos = 14;
  c8:	8e e0       	ldi	r24, 0x0E	; 14
  ca:	90 e0       	ldi	r25, 0x00	; 0
  cc:	90 93 2b 01 	sts	0x012B, r25
  d0:	80 93 2a 01 	sts	0x012A, r24
	ypos = 14;
  d4:	90 93 53 0e 	sts	0x0E53, r25
  d8:	80 93 52 0e 	sts	0x0E52, r24
	direction = 8;
  dc:	88 e0       	ldi	r24, 0x08	; 8
  de:	90 e0       	ldi	r25, 0x00	; 0
  e0:	90 93 bf 07 	sts	0x07BF, r25
  e4:	80 93 be 07 	sts	0x07BE, r24
	set_coordinate_in_array(ypos, xpos, 4);	
  e8:	44 e0       	ldi	r20, 0x04	; 4
  ea:	50 e0       	ldi	r21, 0x00	; 0
  ec:	6e e0       	ldi	r22, 0x0E	; 14
  ee:	70 e0       	ldi	r23, 0x00	; 0
  f0:	8e e0       	ldi	r24, 0x0E	; 14
  f2:	90 e0       	ldi	r25, 0x00	; 0
  f4:	bd d0       	rcall	.+378    	; 0x270 <set_coordinate_in_array>
	set_coordinate_in_array(left_y_pos() , left_x_pos(), 5);	
  f6:	f7 d0       	rcall	.+494    	; 0x2e6 <left_x_pos>
  f8:	ec 01       	movw	r28, r24
  fa:	07 d1       	rcall	.+526    	; 0x30a <left_y_pos>
  fc:	45 e0       	ldi	r20, 0x05	; 5
  fe:	50 e0       	ldi	r21, 0x00	; 0
 100:	be 01       	movw	r22, r28
 102:	b6 d0       	rcall	.+364    	; 0x270 <set_coordinate_in_array>
	set_coordinate_in_array(right_y_pos() , right_x_pos(), 5);	
 104:	c6 d0       	rcall	.+396    	; 0x292 <right_x_pos>
 106:	ec 01       	movw	r28, r24
 108:	d6 d0       	rcall	.+428    	; 0x2b6 <right_y_pos>
 10a:	45 e0       	ldi	r20, 0x05	; 5
 10c:	50 e0       	ldi	r21, 0x00	; 0
 10e:	be 01       	movw	r22, r28
 110:	af d0       	rcall	.+350    	; 0x270 <set_coordinate_in_array>
	robot_move();
 112:	99 d0       	rcall	.+306    	; 0x246 <robot_move>
	nearest_path_to_array();
 114:	02 d0       	rcall	.+4      	; 0x11a <nearest_path_to_array>
	/* Replace with your application code */
	while (1)
	{

		//robot_keep_right();
		drive_nearest_path();
 116:	23 d1       	rcall	.+582    	; 0x35e <drive_nearest_path>
 118:	fe cf       	rjmp	.-4      	; 0x116 <main+0x4e>

0000011a <nearest_path_to_array>:
{
	for(int i = 0; i < number_of_steps; i++)
	{
		robot_move();
	}
}
 11a:	80 91 04 01 	lds	r24, 0x0104
 11e:	90 91 05 01 	lds	r25, 0x0105
 122:	89 2b       	or	r24, r25
 124:	d9 f0       	breq	.+54     	; 0x15c <nearest_path_to_array+0x42>
 126:	e0 e0       	ldi	r30, 0x00	; 0
 128:	f1 e0       	ldi	r31, 0x01	; 1
 12a:	4d e1       	ldi	r20, 0x1D	; 29
 12c:	23 e0       	ldi	r18, 0x03	; 3
 12e:	30 e0       	ldi	r19, 0x00	; 0
 130:	80 81       	ld	r24, Z
 132:	91 81       	ldd	r25, Z+1	; 0x01
 134:	48 9f       	mul	r20, r24
 136:	d0 01       	movw	r26, r0
 138:	49 9f       	mul	r20, r25
 13a:	b0 0d       	add	r27, r0
 13c:	11 24       	eor	r1, r1
 13e:	82 81       	ldd	r24, Z+2	; 0x02
 140:	93 81       	ldd	r25, Z+3	; 0x03
 142:	a8 0f       	add	r26, r24
 144:	b9 1f       	adc	r27, r25
 146:	aa 0f       	add	r26, r26
 148:	bb 1f       	adc	r27, r27
 14a:	a0 54       	subi	r26, 0x40	; 64
 14c:	b8 4f       	sbci	r27, 0xF8	; 248
 14e:	2d 93       	st	X+, r18
 150:	3c 93       	st	X, r19
 152:	36 96       	adiw	r30, 0x06	; 6
 154:	84 81       	ldd	r24, Z+4	; 0x04
 156:	95 81       	ldd	r25, Z+5	; 0x05
 158:	89 2b       	or	r24, r25
 15a:	51 f7       	brne	.-44     	; 0x130 <nearest_path_to_array+0x16>
 15c:	08 95       	ret

0000015e <robot_turn_right>:
 15e:	80 91 be 07 	lds	r24, 0x07BE
 162:	90 91 bf 07 	lds	r25, 0x07BF
 166:	88 30       	cpi	r24, 0x08	; 8
 168:	91 05       	cpc	r25, r1
 16a:	39 f4       	brne	.+14     	; 0x17a <robot_turn_right+0x1c>
 16c:	86 e0       	ldi	r24, 0x06	; 6
 16e:	90 e0       	ldi	r25, 0x00	; 0
 170:	90 93 bf 07 	sts	0x07BF, r25
 174:	80 93 be 07 	sts	0x07BE, r24
 178:	08 95       	ret
 17a:	86 30       	cpi	r24, 0x06	; 6
 17c:	91 05       	cpc	r25, r1
 17e:	39 f4       	brne	.+14     	; 0x18e <robot_turn_right+0x30>
 180:	82 e0       	ldi	r24, 0x02	; 2
 182:	90 e0       	ldi	r25, 0x00	; 0
 184:	90 93 bf 07 	sts	0x07BF, r25
 188:	80 93 be 07 	sts	0x07BE, r24
 18c:	08 95       	ret
 18e:	82 30       	cpi	r24, 0x02	; 2
 190:	91 05       	cpc	r25, r1
 192:	39 f4       	brne	.+14     	; 0x1a2 <robot_turn_right+0x44>
 194:	84 e0       	ldi	r24, 0x04	; 4
 196:	90 e0       	ldi	r25, 0x00	; 0
 198:	90 93 bf 07 	sts	0x07BF, r25
 19c:	80 93 be 07 	sts	0x07BE, r24
 1a0:	08 95       	ret
 1a2:	04 97       	sbiw	r24, 0x04	; 4
 1a4:	31 f4       	brne	.+12     	; 0x1b2 <robot_turn_right+0x54>
 1a6:	88 e0       	ldi	r24, 0x08	; 8
 1a8:	90 e0       	ldi	r25, 0x00	; 0
 1aa:	90 93 bf 07 	sts	0x07BF, r25
 1ae:	80 93 be 07 	sts	0x07BE, r24
 1b2:	08 95       	ret

000001b4 <robot_turn_left>:
 1b4:	80 91 be 07 	lds	r24, 0x07BE
 1b8:	90 91 bf 07 	lds	r25, 0x07BF
 1bc:	88 30       	cpi	r24, 0x08	; 8
 1be:	91 05       	cpc	r25, r1
 1c0:	39 f4       	brne	.+14     	; 0x1d0 <robot_turn_left+0x1c>
 1c2:	84 e0       	ldi	r24, 0x04	; 4
 1c4:	90 e0       	ldi	r25, 0x00	; 0
 1c6:	90 93 bf 07 	sts	0x07BF, r25
 1ca:	80 93 be 07 	sts	0x07BE, r24
 1ce:	08 95       	ret
 1d0:	86 30       	cpi	r24, 0x06	; 6
 1d2:	91 05       	cpc	r25, r1
 1d4:	39 f4       	brne	.+14     	; 0x1e4 <robot_turn_left+0x30>
 1d6:	88 e0       	ldi	r24, 0x08	; 8
 1d8:	90 e0       	ldi	r25, 0x00	; 0
 1da:	90 93 bf 07 	sts	0x07BF, r25
 1de:	80 93 be 07 	sts	0x07BE, r24
 1e2:	08 95       	ret
 1e4:	82 30       	cpi	r24, 0x02	; 2
 1e6:	91 05       	cpc	r25, r1
 1e8:	39 f4       	brne	.+14     	; 0x1f8 <robot_turn_left+0x44>
 1ea:	86 e0       	ldi	r24, 0x06	; 6
 1ec:	90 e0       	ldi	r25, 0x00	; 0
 1ee:	90 93 bf 07 	sts	0x07BF, r25
 1f2:	80 93 be 07 	sts	0x07BE, r24
 1f6:	08 95       	ret
 1f8:	04 97       	sbiw	r24, 0x04	; 4
 1fa:	31 f4       	brne	.+12     	; 0x208 <robot_turn_left+0x54>
 1fc:	82 e0       	ldi	r24, 0x02	; 2
 1fe:	90 e0       	ldi	r25, 0x00	; 0
 200:	90 93 bf 07 	sts	0x07BF, r25
 204:	80 93 be 07 	sts	0x07BE, r24
 208:	08 95       	ret

0000020a <next_y_position>:
 20a:	9c 01       	movw	r18, r24
 20c:	80 91 52 0e 	lds	r24, 0x0E52
 210:	90 91 53 0e 	lds	r25, 0x0E53
 214:	28 30       	cpi	r18, 0x08	; 8
 216:	31 05       	cpc	r19, r1
 218:	11 f4       	brne	.+4      	; 0x21e <next_y_position+0x14>
 21a:	01 97       	sbiw	r24, 0x01	; 1
 21c:	08 95       	ret
 21e:	22 30       	cpi	r18, 0x02	; 2
 220:	31 05       	cpc	r19, r1
 222:	09 f4       	brne	.+2      	; 0x226 <next_y_position+0x1c>
 224:	01 96       	adiw	r24, 0x01	; 1
 226:	08 95       	ret

00000228 <next_x_position>:
 228:	9c 01       	movw	r18, r24
 22a:	80 91 2a 01 	lds	r24, 0x012A
 22e:	90 91 2b 01 	lds	r25, 0x012B
 232:	26 30       	cpi	r18, 0x06	; 6
 234:	31 05       	cpc	r19, r1
 236:	11 f4       	brne	.+4      	; 0x23c <next_x_position+0x14>
 238:	01 96       	adiw	r24, 0x01	; 1
 23a:	08 95       	ret
 23c:	24 30       	cpi	r18, 0x04	; 4
 23e:	31 05       	cpc	r19, r1
 240:	09 f4       	brne	.+2      	; 0x244 <next_x_position+0x1c>
 242:	01 97       	sbiw	r24, 0x01	; 1
 244:	08 95       	ret

00000246 <robot_move>:
 246:	cf 93       	push	r28
 248:	df 93       	push	r29
 24a:	c0 91 be 07 	lds	r28, 0x07BE
 24e:	d0 91 bf 07 	lds	r29, 0x07BF
 252:	ce 01       	movw	r24, r28
 254:	e9 df       	rcall	.-46     	; 0x228 <next_x_position>
 256:	90 93 2b 01 	sts	0x012B, r25
 25a:	80 93 2a 01 	sts	0x012A, r24
 25e:	ce 01       	movw	r24, r28
 260:	d4 df       	rcall	.-88     	; 0x20a <next_y_position>
 262:	90 93 53 0e 	sts	0x0E53, r25
 266:	80 93 52 0e 	sts	0x0E52, r24
 26a:	df 91       	pop	r29
 26c:	cf 91       	pop	r28
 26e:	08 95       	ret

00000270 <set_coordinate_in_array>:



void set_coordinate_in_array(int y, int x, int value)
{
	robot_array[y][x] = value;
 270:	2d e1       	ldi	r18, 0x1D	; 29
 272:	fc 01       	movw	r30, r24
 274:	2e 9f       	mul	r18, r30
 276:	c0 01       	movw	r24, r0
 278:	2f 9f       	mul	r18, r31
 27a:	90 0d       	add	r25, r0
 27c:	11 24       	eor	r1, r1
 27e:	68 0f       	add	r22, r24
 280:	79 1f       	adc	r23, r25
 282:	fb 01       	movw	r30, r22
 284:	ee 0f       	add	r30, r30
 286:	ff 1f       	adc	r31, r31
 288:	e4 5d       	subi	r30, 0xD4	; 212
 28a:	fe 4f       	sbci	r31, 0xFE	; 254
 28c:	51 83       	std	Z+1, r21	; 0x01
 28e:	40 83       	st	Z, r20
 290:	08 95       	ret

00000292 <right_x_pos>:

//position to the right of the robot x coordinates
int right_x_pos()
{
	int right_x_pos;
	right_x_pos = xpos;
 292:	80 91 2a 01 	lds	r24, 0x012A
 296:	90 91 2b 01 	lds	r25, 0x012B
	if(direction == up)
 29a:	20 91 be 07 	lds	r18, 0x07BE
 29e:	30 91 bf 07 	lds	r19, 0x07BF
 2a2:	28 30       	cpi	r18, 0x08	; 8
 2a4:	31 05       	cpc	r19, r1
 2a6:	11 f4       	brne	.+4      	; 0x2ac <right_x_pos+0x1a>
	{
		right_x_pos = xpos +1;
 2a8:	01 96       	adiw	r24, 0x01	; 1
 2aa:	08 95       	ret
	}
	else if(direction == down)
 2ac:	22 30       	cpi	r18, 0x02	; 2
 2ae:	31 05       	cpc	r19, r1
 2b0:	09 f4       	brne	.+2      	; 0x2b4 <right_x_pos+0x22>
	{
		right_x_pos = xpos -1;
 2b2:	01 97       	sbiw	r24, 0x01	; 1
	else if(direction == right)
	{
		right_x_pos = xpos;
	}
	return right_x_pos;
}
 2b4:	08 95       	ret

000002b6 <right_y_pos>:
	
//position to the right of the robot y coordinates
int right_y_pos()
{
	int right_y_pos = ypos;
 2b6:	80 91 52 0e 	lds	r24, 0x0E52
 2ba:	90 91 53 0e 	lds	r25, 0x0E53
	if(direction == up)
 2be:	20 91 be 07 	lds	r18, 0x07BE
 2c2:	30 91 bf 07 	lds	r19, 0x07BF
 2c6:	28 30       	cpi	r18, 0x08	; 8
 2c8:	31 05       	cpc	r19, r1
 2ca:	61 f0       	breq	.+24     	; 0x2e4 <right_y_pos+0x2e>
	{
		right_y_pos = ypos;
	}
	else if(direction == down)
 2cc:	22 30       	cpi	r18, 0x02	; 2
 2ce:	31 05       	cpc	r19, r1
 2d0:	49 f0       	breq	.+18     	; 0x2e4 <right_y_pos+0x2e>
	{
		right_y_pos = ypos;
	}
	else if(direction == left)
 2d2:	24 30       	cpi	r18, 0x04	; 4
 2d4:	31 05       	cpc	r19, r1
 2d6:	11 f4       	brne	.+4      	; 0x2dc <right_y_pos+0x26>
	{
		right_y_pos = ypos -1;
 2d8:	01 97       	sbiw	r24, 0x01	; 1
 2da:	08 95       	ret
	}
	else if(direction == right)
 2dc:	26 30       	cpi	r18, 0x06	; 6
 2de:	31 05       	cpc	r19, r1
 2e0:	09 f4       	brne	.+2      	; 0x2e4 <right_y_pos+0x2e>
	{
		right_y_pos = ypos +1;
 2e2:	01 96       	adiw	r24, 0x01	; 1
	}
	return right_y_pos;
}
 2e4:	08 95       	ret

000002e6 <left_x_pos>:

//position to the left of the robot x coordinates
int left_x_pos()
{
	int left_x_pos = xpos;
 2e6:	80 91 2a 01 	lds	r24, 0x012A
 2ea:	90 91 2b 01 	lds	r25, 0x012B
	if(direction == up)
 2ee:	20 91 be 07 	lds	r18, 0x07BE
 2f2:	30 91 bf 07 	lds	r19, 0x07BF
 2f6:	28 30       	cpi	r18, 0x08	; 8
 2f8:	31 05       	cpc	r19, r1
 2fa:	11 f4       	brne	.+4      	; 0x300 <left_x_pos+0x1a>
	{
		left_x_pos = xpos -1;
 2fc:	01 97       	sbiw	r24, 0x01	; 1
 2fe:	08 95       	ret
	}
	else if(direction == down)
 300:	22 30       	cpi	r18, 0x02	; 2
 302:	31 05       	cpc	r19, r1
 304:	09 f4       	brne	.+2      	; 0x308 <left_x_pos+0x22>
	{
		left_x_pos = xpos +1;
 306:	01 96       	adiw	r24, 0x01	; 1
	else if(direction == right)
	{
		left_x_pos = xpos;
	}
	return left_x_pos;
}
 308:	08 95       	ret

0000030a <left_y_pos>:

//position to the left of the robot y coordinates
int left_y_pos()
{
	int left_y_pos = xpos;
 30a:	80 91 2a 01 	lds	r24, 0x012A
 30e:	90 91 2b 01 	lds	r25, 0x012B
	if(direction == up)
 312:	20 91 be 07 	lds	r18, 0x07BE
 316:	30 91 bf 07 	lds	r19, 0x07BF
 31a:	28 30       	cpi	r18, 0x08	; 8
 31c:	31 05       	cpc	r19, r1
 31e:	29 f4       	brne	.+10     	; 0x32a <left_y_pos+0x20>
	{
		left_y_pos = ypos;
 320:	80 91 52 0e 	lds	r24, 0x0E52
 324:	90 91 53 0e 	lds	r25, 0x0E53
 328:	08 95       	ret
	}
	else if(direction == down)
 32a:	22 30       	cpi	r18, 0x02	; 2
 32c:	31 05       	cpc	r19, r1
 32e:	29 f4       	brne	.+10     	; 0x33a <left_y_pos+0x30>
	{
		left_y_pos = ypos;
 330:	80 91 52 0e 	lds	r24, 0x0E52
 334:	90 91 53 0e 	lds	r25, 0x0E53
 338:	08 95       	ret
	}
	else if(direction == left)
 33a:	24 30       	cpi	r18, 0x04	; 4
 33c:	31 05       	cpc	r19, r1
 33e:	31 f4       	brne	.+12     	; 0x34c <left_y_pos+0x42>
	{
		left_y_pos = ypos +1;
 340:	80 91 52 0e 	lds	r24, 0x0E52
 344:	90 91 53 0e 	lds	r25, 0x0E53
 348:	01 96       	adiw	r24, 0x01	; 1
 34a:	08 95       	ret
	}
	else if(direction == right)
 34c:	26 30       	cpi	r18, 0x06	; 6
 34e:	31 05       	cpc	r19, r1
 350:	29 f4       	brne	.+10     	; 0x35c <left_y_pos+0x52>
	{
		left_y_pos = ypos -1;
 352:	80 91 52 0e 	lds	r24, 0x0E52
 356:	90 91 53 0e 	lds	r25, 0x0E53
 35a:	01 97       	sbiw	r24, 0x01	; 1
	}
	return left_y_pos;
}
 35c:	08 95       	ret

0000035e <drive_nearest_path>:
		back_at_start(ypos, xpos);
	}
}

bool drive_nearest_path()
{
 35e:	0f 93       	push	r16
 360:	1f 93       	push	r17
 362:	cf 93       	push	r28
 364:	df 93       	push	r29
	if(detect_path(next_y_position(direction), next_x_position(direction)))
 366:	c0 91 be 07 	lds	r28, 0x07BE
 36a:	d0 91 bf 07 	lds	r29, 0x07BF
 36e:	ce 01       	movw	r24, r28
 370:	5b df       	rcall	.-330    	; 0x228 <next_x_position>
 372:	8c 01       	movw	r16, r24
 374:	ce 01       	movw	r24, r28
 376:	49 df       	rcall	.-366    	; 0x20a <next_y_position>
	
}

bool detect_path(int next_yposition,int next_xposition)
{
	if(nearest_path_array[next_yposition][next_xposition] == 3)
 378:	2d e1       	ldi	r18, 0x1D	; 29
 37a:	ac 01       	movw	r20, r24
 37c:	24 9f       	mul	r18, r20
 37e:	c0 01       	movw	r24, r0
 380:	25 9f       	mul	r18, r21
 382:	90 0d       	add	r25, r0
 384:	11 24       	eor	r1, r1
 386:	08 0f       	add	r16, r24
 388:	19 1f       	adc	r17, r25
 38a:	f8 01       	movw	r30, r16
 38c:	ee 0f       	add	r30, r30
 38e:	ff 1f       	adc	r31, r31
 390:	e0 54       	subi	r30, 0x40	; 64
 392:	f8 4f       	sbci	r31, 0xF8	; 248
	}
}

bool drive_nearest_path()
{
	if(detect_path(next_y_position(direction), next_x_position(direction)))
 394:	80 81       	ld	r24, Z
 396:	91 81       	ldd	r25, Z+1	; 0x01
 398:	03 97       	sbiw	r24, 0x03	; 3
 39a:	19 f4       	brne	.+6      	; 0x3a2 <drive_nearest_path+0x44>
	{
		robot_move(); 
 39c:	54 df       	rcall	.-344    	; 0x246 <robot_move>
		return false;
 39e:	80 e0       	ldi	r24, 0x00	; 0
 3a0:	2f c0       	rjmp	.+94     	; 0x400 <drive_nearest_path+0xa2>
	}
	else if(detect_path(right_y_pos(), right_x_pos()))
 3a2:	77 df       	rcall	.-274    	; 0x292 <right_x_pos>
 3a4:	ec 01       	movw	r28, r24
 3a6:	87 df       	rcall	.-242    	; 0x2b6 <right_y_pos>
	
}

bool detect_path(int next_yposition,int next_xposition)
{
	if(nearest_path_array[next_yposition][next_xposition] == 3)
 3a8:	2d e1       	ldi	r18, 0x1D	; 29
 3aa:	ac 01       	movw	r20, r24
 3ac:	24 9f       	mul	r18, r20
 3ae:	c0 01       	movw	r24, r0
 3b0:	25 9f       	mul	r18, r21
 3b2:	90 0d       	add	r25, r0
 3b4:	11 24       	eor	r1, r1
 3b6:	c8 0f       	add	r28, r24
 3b8:	d9 1f       	adc	r29, r25
 3ba:	cc 0f       	add	r28, r28
 3bc:	dd 1f       	adc	r29, r29
 3be:	c0 54       	subi	r28, 0x40	; 64
 3c0:	d8 4f       	sbci	r29, 0xF8	; 248
	if(detect_path(next_y_position(direction), next_x_position(direction)))
	{
		robot_move(); 
		return false;
	}
	else if(detect_path(right_y_pos(), right_x_pos()))
 3c2:	88 81       	ld	r24, Y
 3c4:	99 81       	ldd	r25, Y+1	; 0x01
 3c6:	03 97       	sbiw	r24, 0x03	; 3
 3c8:	19 f4       	brne	.+6      	; 0x3d0 <drive_nearest_path+0x72>
	{
		robot_turn_right();
 3ca:	c9 de       	rcall	.-622    	; 0x15e <robot_turn_right>
		return false;
 3cc:	80 e0       	ldi	r24, 0x00	; 0
 3ce:	18 c0       	rjmp	.+48     	; 0x400 <drive_nearest_path+0xa2>
	}
	else if(detect_path(left_y_pos(), left_x_pos()))
 3d0:	8a df       	rcall	.-236    	; 0x2e6 <left_x_pos>
 3d2:	ec 01       	movw	r28, r24
 3d4:	9a df       	rcall	.-204    	; 0x30a <left_y_pos>
	
}

bool detect_path(int next_yposition,int next_xposition)
{
	if(nearest_path_array[next_yposition][next_xposition] == 3)
 3d6:	2d e1       	ldi	r18, 0x1D	; 29
 3d8:	ac 01       	movw	r20, r24
 3da:	24 9f       	mul	r18, r20
 3dc:	c0 01       	movw	r24, r0
 3de:	25 9f       	mul	r18, r21
 3e0:	90 0d       	add	r25, r0
 3e2:	11 24       	eor	r1, r1
 3e4:	c8 0f       	add	r28, r24
 3e6:	d9 1f       	adc	r29, r25
 3e8:	cc 0f       	add	r28, r28
 3ea:	dd 1f       	adc	r29, r29
 3ec:	c0 54       	subi	r28, 0x40	; 64
 3ee:	d8 4f       	sbci	r29, 0xF8	; 248
	else if(detect_path(right_y_pos(), right_x_pos()))
	{
		robot_turn_right();
		return false;
	}
	else if(detect_path(left_y_pos(), left_x_pos()))
 3f0:	88 81       	ld	r24, Y
 3f2:	99 81       	ldd	r25, Y+1	; 0x01
 3f4:	03 97       	sbiw	r24, 0x03	; 3
 3f6:	19 f4       	brne	.+6      	; 0x3fe <drive_nearest_path+0xa0>
	{
		robot_turn_left();
 3f8:	dd de       	rcall	.-582    	; 0x1b4 <robot_turn_left>
		return false;
 3fa:	80 e0       	ldi	r24, 0x00	; 0
 3fc:	01 c0       	rjmp	.+2      	; 0x400 <drive_nearest_path+0xa2>
	}
	else
	{
		return true;
 3fe:	81 e0       	ldi	r24, 0x01	; 1
	}
	set_coordinate_in_array(ypos, xpos, 1);
}
 400:	df 91       	pop	r29
 402:	cf 91       	pop	r28
 404:	1f 91       	pop	r17
 406:	0f 91       	pop	r16
 408:	08 95       	ret

0000040a <_exit>:
 40a:	f8 94       	cli

0000040c <__stop_program>:
 40c:	ff cf       	rjmp	.-2      	; 0x40c <__stop_program>
