
SearchAndFindGurra.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000006bc  00800100  00000a66  00000afa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000a66  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000013c5  008007bc  008007bc  000011b6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000011b6  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000150  00000000  00000000  000011e6  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001558  00000000  00000000  00001336  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000004b7  00000000  00000000  0000288e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000a85  00000000  00000000  00002d45  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000032c  00000000  00000000  000037cc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004d3  00000000  00000000  00003af8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000fc3  00000000  00000000  00003fcb  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000178  00000000  00000000  00004f8e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	17 e0       	ldi	r17, 0x07	; 7
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e6 e6       	ldi	r30, 0x66	; 102
  a0:	fa e0       	ldi	r31, 0x0A	; 10
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	ac 3b       	cpi	r26, 0xBC	; 188
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	2b e1       	ldi	r18, 0x1B	; 27
  b4:	ac eb       	ldi	r26, 0xBC	; 188
  b6:	b7 e0       	ldi	r27, 0x07	; 7
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a1 38       	cpi	r26, 0x81	; 129
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	2d d1       	rcall	.+602    	; 0x31e <main>
  c4:	ce c4       	rjmp	.+2460   	; 0xa62 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <robot_turn_right>:
	else if(direction == right)
	{
		back_y_pos = ypos;
	}
	return back_y_pos;
}
  c8:	80 91 c0 07 	lds	r24, 0x07C0
  cc:	90 91 c1 07 	lds	r25, 0x07C1
  d0:	88 30       	cpi	r24, 0x08	; 8
  d2:	91 05       	cpc	r25, r1
  d4:	39 f4       	brne	.+14     	; 0xe4 <robot_turn_right+0x1c>
  d6:	86 e0       	ldi	r24, 0x06	; 6
  d8:	90 e0       	ldi	r25, 0x00	; 0
  da:	90 93 c1 07 	sts	0x07C1, r25
  de:	80 93 c0 07 	sts	0x07C0, r24
  e2:	08 95       	ret
  e4:	86 30       	cpi	r24, 0x06	; 6
  e6:	91 05       	cpc	r25, r1
  e8:	39 f4       	brne	.+14     	; 0xf8 <robot_turn_right+0x30>
  ea:	82 e0       	ldi	r24, 0x02	; 2
  ec:	90 e0       	ldi	r25, 0x00	; 0
  ee:	90 93 c1 07 	sts	0x07C1, r25
  f2:	80 93 c0 07 	sts	0x07C0, r24
  f6:	08 95       	ret
  f8:	82 30       	cpi	r24, 0x02	; 2
  fa:	91 05       	cpc	r25, r1
  fc:	39 f4       	brne	.+14     	; 0x10c <robot_turn_right+0x44>
  fe:	84 e0       	ldi	r24, 0x04	; 4
 100:	90 e0       	ldi	r25, 0x00	; 0
 102:	90 93 c1 07 	sts	0x07C1, r25
 106:	80 93 c0 07 	sts	0x07C0, r24
 10a:	08 95       	ret
 10c:	04 97       	sbiw	r24, 0x04	; 4
 10e:	31 f4       	brne	.+12     	; 0x11c <robot_turn_right+0x54>
 110:	88 e0       	ldi	r24, 0x08	; 8
 112:	90 e0       	ldi	r25, 0x00	; 0
 114:	90 93 c1 07 	sts	0x07C1, r25
 118:	80 93 c0 07 	sts	0x07C0, r24
 11c:	08 95       	ret

0000011e <robot_turn_left>:
 11e:	80 91 c0 07 	lds	r24, 0x07C0
 122:	90 91 c1 07 	lds	r25, 0x07C1
 126:	88 30       	cpi	r24, 0x08	; 8
 128:	91 05       	cpc	r25, r1
 12a:	39 f4       	brne	.+14     	; 0x13a <robot_turn_left+0x1c>
 12c:	84 e0       	ldi	r24, 0x04	; 4
 12e:	90 e0       	ldi	r25, 0x00	; 0
 130:	90 93 c1 07 	sts	0x07C1, r25
 134:	80 93 c0 07 	sts	0x07C0, r24
 138:	08 95       	ret
 13a:	86 30       	cpi	r24, 0x06	; 6
 13c:	91 05       	cpc	r25, r1
 13e:	39 f4       	brne	.+14     	; 0x14e <robot_turn_left+0x30>
 140:	88 e0       	ldi	r24, 0x08	; 8
 142:	90 e0       	ldi	r25, 0x00	; 0
 144:	90 93 c1 07 	sts	0x07C1, r25
 148:	80 93 c0 07 	sts	0x07C0, r24
 14c:	08 95       	ret
 14e:	82 30       	cpi	r24, 0x02	; 2
 150:	91 05       	cpc	r25, r1
 152:	39 f4       	brne	.+14     	; 0x162 <robot_turn_left+0x44>
 154:	86 e0       	ldi	r24, 0x06	; 6
 156:	90 e0       	ldi	r25, 0x00	; 0
 158:	90 93 c1 07 	sts	0x07C1, r25
 15c:	80 93 c0 07 	sts	0x07C0, r24
 160:	08 95       	ret
 162:	04 97       	sbiw	r24, 0x04	; 4
 164:	31 f4       	brne	.+12     	; 0x172 <robot_turn_left+0x54>
 166:	82 e0       	ldi	r24, 0x02	; 2
 168:	90 e0       	ldi	r25, 0x00	; 0
 16a:	90 93 c1 07 	sts	0x07C1, r25
 16e:	80 93 c0 07 	sts	0x07C0, r24
 172:	08 95       	ret

00000174 <robot_turn_around>:
 174:	80 91 c0 07 	lds	r24, 0x07C0
 178:	90 91 c1 07 	lds	r25, 0x07C1
 17c:	88 30       	cpi	r24, 0x08	; 8
 17e:	91 05       	cpc	r25, r1
 180:	39 f4       	brne	.+14     	; 0x190 <robot_turn_around+0x1c>
 182:	82 e0       	ldi	r24, 0x02	; 2
 184:	90 e0       	ldi	r25, 0x00	; 0
 186:	90 93 c1 07 	sts	0x07C1, r25
 18a:	80 93 c0 07 	sts	0x07C0, r24
 18e:	08 95       	ret
 190:	86 30       	cpi	r24, 0x06	; 6
 192:	91 05       	cpc	r25, r1
 194:	39 f4       	brne	.+14     	; 0x1a4 <robot_turn_around+0x30>
 196:	84 e0       	ldi	r24, 0x04	; 4
 198:	90 e0       	ldi	r25, 0x00	; 0
 19a:	90 93 c1 07 	sts	0x07C1, r25
 19e:	80 93 c0 07 	sts	0x07C0, r24
 1a2:	08 95       	ret
 1a4:	82 30       	cpi	r24, 0x02	; 2
 1a6:	91 05       	cpc	r25, r1
 1a8:	39 f4       	brne	.+14     	; 0x1b8 <robot_turn_around+0x44>
 1aa:	88 e0       	ldi	r24, 0x08	; 8
 1ac:	90 e0       	ldi	r25, 0x00	; 0
 1ae:	90 93 c1 07 	sts	0x07C1, r25
 1b2:	80 93 c0 07 	sts	0x07C0, r24
 1b6:	08 95       	ret
 1b8:	04 97       	sbiw	r24, 0x04	; 4
 1ba:	31 f4       	brne	.+12     	; 0x1c8 <robot_turn_around+0x54>
 1bc:	86 e0       	ldi	r24, 0x06	; 6
 1be:	90 e0       	ldi	r25, 0x00	; 0
 1c0:	90 93 c1 07 	sts	0x07C1, r25
 1c4:	80 93 c0 07 	sts	0x07C0, r24
 1c8:	08 95       	ret

000001ca <next_y_position>:
 1ca:	9c 01       	movw	r18, r24
 1cc:	80 91 c4 07 	lds	r24, 0x07C4
 1d0:	90 91 c5 07 	lds	r25, 0x07C5
 1d4:	28 30       	cpi	r18, 0x08	; 8
 1d6:	31 05       	cpc	r19, r1
 1d8:	11 f4       	brne	.+4      	; 0x1de <next_y_position+0x14>
 1da:	01 97       	sbiw	r24, 0x01	; 1
 1dc:	08 95       	ret
 1de:	22 30       	cpi	r18, 0x02	; 2
 1e0:	31 05       	cpc	r19, r1
 1e2:	09 f4       	brne	.+2      	; 0x1e6 <next_y_position+0x1c>
 1e4:	01 96       	adiw	r24, 0x01	; 1
 1e6:	08 95       	ret

000001e8 <next_x_position>:
 1e8:	9c 01       	movw	r18, r24
 1ea:	80 91 bc 07 	lds	r24, 0x07BC
 1ee:	90 91 bd 07 	lds	r25, 0x07BD
 1f2:	26 30       	cpi	r18, 0x06	; 6
 1f4:	31 05       	cpc	r19, r1
 1f6:	11 f4       	brne	.+4      	; 0x1fc <next_x_position+0x14>
 1f8:	01 96       	adiw	r24, 0x01	; 1
 1fa:	08 95       	ret
 1fc:	24 30       	cpi	r18, 0x04	; 4
 1fe:	31 05       	cpc	r19, r1
 200:	09 f4       	brne	.+2      	; 0x204 <next_x_position+0x1c>
 202:	01 97       	sbiw	r24, 0x01	; 1
 204:	08 95       	ret

00000206 <right_x_pos>:
 206:	80 91 bc 07 	lds	r24, 0x07BC
 20a:	90 91 bd 07 	lds	r25, 0x07BD
 20e:	20 91 c0 07 	lds	r18, 0x07C0
 212:	30 91 c1 07 	lds	r19, 0x07C1
 216:	28 30       	cpi	r18, 0x08	; 8
 218:	31 05       	cpc	r19, r1
 21a:	11 f4       	brne	.+4      	; 0x220 <right_x_pos+0x1a>
 21c:	01 96       	adiw	r24, 0x01	; 1
 21e:	08 95       	ret
 220:	22 30       	cpi	r18, 0x02	; 2
 222:	31 05       	cpc	r19, r1
 224:	09 f4       	brne	.+2      	; 0x228 <right_x_pos+0x22>
 226:	01 97       	sbiw	r24, 0x01	; 1
 228:	08 95       	ret

0000022a <right_y_pos>:
 22a:	80 91 c4 07 	lds	r24, 0x07C4
 22e:	90 91 c5 07 	lds	r25, 0x07C5
 232:	20 91 c0 07 	lds	r18, 0x07C0
 236:	30 91 c1 07 	lds	r19, 0x07C1
 23a:	28 30       	cpi	r18, 0x08	; 8
 23c:	31 05       	cpc	r19, r1
 23e:	61 f0       	breq	.+24     	; 0x258 <right_y_pos+0x2e>
 240:	22 30       	cpi	r18, 0x02	; 2
 242:	31 05       	cpc	r19, r1
 244:	49 f0       	breq	.+18     	; 0x258 <right_y_pos+0x2e>
 246:	24 30       	cpi	r18, 0x04	; 4
 248:	31 05       	cpc	r19, r1
 24a:	11 f4       	brne	.+4      	; 0x250 <right_y_pos+0x26>
 24c:	01 97       	sbiw	r24, 0x01	; 1
 24e:	08 95       	ret
 250:	26 30       	cpi	r18, 0x06	; 6
 252:	31 05       	cpc	r19, r1
 254:	09 f4       	brne	.+2      	; 0x258 <right_y_pos+0x2e>
 256:	01 96       	adiw	r24, 0x01	; 1
 258:	08 95       	ret

0000025a <left_x_pos>:
 25a:	80 91 bc 07 	lds	r24, 0x07BC
 25e:	90 91 bd 07 	lds	r25, 0x07BD
 262:	20 91 c0 07 	lds	r18, 0x07C0
 266:	30 91 c1 07 	lds	r19, 0x07C1
 26a:	28 30       	cpi	r18, 0x08	; 8
 26c:	31 05       	cpc	r19, r1
 26e:	11 f4       	brne	.+4      	; 0x274 <left_x_pos+0x1a>
 270:	01 97       	sbiw	r24, 0x01	; 1
 272:	08 95       	ret
 274:	22 30       	cpi	r18, 0x02	; 2
 276:	31 05       	cpc	r19, r1
 278:	09 f4       	brne	.+2      	; 0x27c <left_x_pos+0x22>
 27a:	01 96       	adiw	r24, 0x01	; 1
 27c:	08 95       	ret

0000027e <left_y_pos>:
 27e:	80 91 c4 07 	lds	r24, 0x07C4
 282:	90 91 c5 07 	lds	r25, 0x07C5
 286:	20 91 c0 07 	lds	r18, 0x07C0
 28a:	30 91 c1 07 	lds	r19, 0x07C1
 28e:	28 30       	cpi	r18, 0x08	; 8
 290:	31 05       	cpc	r19, r1
 292:	61 f0       	breq	.+24     	; 0x2ac <left_y_pos+0x2e>
 294:	22 30       	cpi	r18, 0x02	; 2
 296:	31 05       	cpc	r19, r1
 298:	49 f0       	breq	.+18     	; 0x2ac <left_y_pos+0x2e>
 29a:	24 30       	cpi	r18, 0x04	; 4
 29c:	31 05       	cpc	r19, r1
 29e:	11 f4       	brne	.+4      	; 0x2a4 <left_y_pos+0x26>
 2a0:	01 96       	adiw	r24, 0x01	; 1
 2a2:	08 95       	ret
 2a4:	26 30       	cpi	r18, 0x06	; 6
 2a6:	31 05       	cpc	r19, r1
 2a8:	09 f4       	brne	.+2      	; 0x2ac <left_y_pos+0x2e>
 2aa:	01 97       	sbiw	r24, 0x01	; 1
 2ac:	08 95       	ret

000002ae <forward_to_left_x_pos>:

int forward_to_left_x_pos()
{
	int forward_to_left_x_pos = xpos;
 2ae:	80 91 bc 07 	lds	r24, 0x07BC
 2b2:	90 91 bd 07 	lds	r25, 0x07BD
	if(direction == up)
 2b6:	20 91 c0 07 	lds	r18, 0x07C0
 2ba:	30 91 c1 07 	lds	r19, 0x07C1
 2be:	28 30       	cpi	r18, 0x08	; 8
 2c0:	31 05       	cpc	r19, r1
 2c2:	11 f4       	brne	.+4      	; 0x2c8 <forward_to_left_x_pos+0x1a>
	{
		forward_to_left_x_pos = xpos -1;
 2c4:	01 97       	sbiw	r24, 0x01	; 1
 2c6:	08 95       	ret
	}
	else if(direction == down)
 2c8:	22 30       	cpi	r18, 0x02	; 2
 2ca:	31 05       	cpc	r19, r1
 2cc:	11 f4       	brne	.+4      	; 0x2d2 <forward_to_left_x_pos+0x24>
	{
		forward_to_left_x_pos = xpos +1;
 2ce:	01 96       	adiw	r24, 0x01	; 1
 2d0:	08 95       	ret
	}
	else if(direction == left)
 2d2:	24 30       	cpi	r18, 0x04	; 4
 2d4:	31 05       	cpc	r19, r1
 2d6:	11 f4       	brne	.+4      	; 0x2dc <forward_to_left_x_pos+0x2e>
	{
		forward_to_left_x_pos = xpos -1;
 2d8:	01 97       	sbiw	r24, 0x01	; 1
 2da:	08 95       	ret
	}
	else if(direction == right)
 2dc:	26 30       	cpi	r18, 0x06	; 6
 2de:	31 05       	cpc	r19, r1
 2e0:	09 f4       	brne	.+2      	; 0x2e4 <forward_to_left_x_pos+0x36>
	{
		forward_to_left_x_pos = xpos +1;
 2e2:	01 96       	adiw	r24, 0x01	; 1
	}
	return forward_to_left_x_pos;
}
 2e4:	08 95       	ret

000002e6 <forward_to_left_y_pos>:

int forward_to_left_y_pos()
{
	int forward_to_left_y_pos = ypos;
 2e6:	80 91 c4 07 	lds	r24, 0x07C4
 2ea:	90 91 c5 07 	lds	r25, 0x07C5
	if(direction == up)
 2ee:	20 91 c0 07 	lds	r18, 0x07C0
 2f2:	30 91 c1 07 	lds	r19, 0x07C1
 2f6:	28 30       	cpi	r18, 0x08	; 8
 2f8:	31 05       	cpc	r19, r1
 2fa:	11 f4       	brne	.+4      	; 0x300 <forward_to_left_y_pos+0x1a>
	{
		forward_to_left_y_pos = ypos -1;
 2fc:	01 97       	sbiw	r24, 0x01	; 1
 2fe:	08 95       	ret
	}
	else if(direction == down)
 300:	22 30       	cpi	r18, 0x02	; 2
 302:	31 05       	cpc	r19, r1
 304:	11 f4       	brne	.+4      	; 0x30a <forward_to_left_y_pos+0x24>
	{
		forward_to_left_y_pos = ypos +1;
 306:	01 96       	adiw	r24, 0x01	; 1
 308:	08 95       	ret
	}
	else if(direction == left)
 30a:	24 30       	cpi	r18, 0x04	; 4
 30c:	31 05       	cpc	r19, r1
 30e:	11 f4       	brne	.+4      	; 0x314 <forward_to_left_y_pos+0x2e>
	{
		forward_to_left_y_pos = ypos +1;
 310:	01 96       	adiw	r24, 0x01	; 1
 312:	08 95       	ret
	}
	else if(direction == right)
 314:	26 30       	cpi	r18, 0x06	; 6
 316:	31 05       	cpc	r19, r1
 318:	09 f4       	brne	.+2      	; 0x31c <forward_to_left_y_pos+0x36>
	{
		forward_to_left_y_pos = ypos -1;
 31a:	01 97       	sbiw	r24, 0x01	; 1
	}
	return forward_to_left_y_pos;
}
 31c:	08 95       	ret

0000031e <main>:
#include <avr/io.h>
#include "SearchAndFindGurra.h"

int main(void)
{
	xpos = 14;
 31e:	8e e0       	ldi	r24, 0x0E	; 14
 320:	90 e0       	ldi	r25, 0x00	; 0
 322:	90 93 bd 07 	sts	0x07BD, r25
 326:	80 93 bc 07 	sts	0x07BC, r24
	ypos = 14;
 32a:	90 93 c5 07 	sts	0x07C5, r25
 32e:	80 93 c4 07 	sts	0x07C4, r24
	direction = 8;
 332:	88 e0       	ldi	r24, 0x08	; 8
 334:	90 e0       	ldi	r25, 0x00	; 0
 336:	90 93 c1 07 	sts	0x07C1, r25
 33a:	80 93 c0 07 	sts	0x07C0, r24
	finished_with_drive_nearest_path = false;	
 33e:	10 92 7c 1b 	sts	0x1B7C, r1
	set_coordinate_in_array(left_y_pos() , left_x_pos(), 5);	
 342:	8b df       	rcall	.-234    	; 0x25a <left_x_pos>
 344:	ec 01       	movw	r28, r24
 346:	9b df       	rcall	.-202    	; 0x27e <left_y_pos>
 348:	45 e0       	ldi	r20, 0x05	; 5
 34a:	50 e0       	ldi	r21, 0x00	; 0
 34c:	be 01       	movw	r22, r28
 34e:	db d0       	rcall	.+438    	; 0x506 <set_coordinate_in_array>
	set_coordinate_in_array(right_y_pos() , right_x_pos(), 5);
 350:	5a df       	rcall	.-332    	; 0x206 <right_x_pos>
 352:	ec 01       	movw	r28, r24
 354:	6a df       	rcall	.-300    	; 0x22a <right_y_pos>
 356:	45 e0       	ldi	r20, 0x05	; 5
 358:	50 e0       	ldi	r21, 0x00	; 0
 35a:	be 01       	movw	r22, r28
 35c:	d4 d0       	rcall	.+424    	; 0x506 <set_coordinate_in_array>
	set_coordinate_in_array(ypos, xpos, 4);
 35e:	60 91 bc 07 	lds	r22, 0x07BC
 362:	70 91 bd 07 	lds	r23, 0x07BD
 366:	44 e0       	ldi	r20, 0x04	; 4
 368:	50 e0       	ldi	r21, 0x00	; 0
 36a:	80 91 c4 07 	lds	r24, 0x07C4
 36e:	90 91 c5 07 	lds	r25, 0x07C5
 372:	c9 d0       	rcall	.+402    	; 0x506 <set_coordinate_in_array>
	nearest_path_to_array();
 374:	0e d0       	rcall	.+28     	; 0x392 <nearest_path_to_array>
	set_coordinate_in_NP_array(ypos, xpos, 1);
 376:	60 91 bc 07 	lds	r22, 0x07BC
 37a:	70 91 bd 07 	lds	r23, 0x07BD
 37e:	41 e0       	ldi	r20, 0x01	; 1
 380:	50 e0       	ldi	r21, 0x00	; 0
 382:	80 91 c4 07 	lds	r24, 0x07C4
 386:	90 91 c5 07 	lds	r25, 0x07C5
 38a:	ce d0       	rcall	.+412    	; 0x528 <set_coordinate_in_NP_array>
	robot_move();	//pay attention to this
 38c:	a9 d0       	rcall	.+338    	; 0x4e0 <robot_move>
	//right_distance = 100;
	//left_distance = 100;
	/* Replace with your application code */
	robot_keep_right();
 38e:	1e d3       	rcall	.+1596   	; 0x9cc <robot_keep_right>
 390:	ff cf       	rjmp	.-2      	; 0x390 <main+0x72>

00000392 <nearest_path_to_array>:
			}
			n++;	
		}
		m++;
	}	
}
 392:	80 91 04 01 	lds	r24, 0x0104
 396:	90 91 05 01 	lds	r25, 0x0105
 39a:	89 2b       	or	r24, r25
 39c:	f9 f0       	breq	.+62     	; 0x3dc <nearest_path_to_array+0x4a>
 39e:	e0 e0       	ldi	r30, 0x00	; 0
 3a0:	f1 e0       	ldi	r31, 0x01	; 1
 3a2:	80 e0       	ldi	r24, 0x00	; 0
 3a4:	90 e0       	ldi	r25, 0x00	; 0
 3a6:	6d e1       	ldi	r22, 0x1D	; 29
 3a8:	43 e0       	ldi	r20, 0x03	; 3
 3aa:	50 e0       	ldi	r21, 0x00	; 0
 3ac:	20 81       	ld	r18, Z
 3ae:	31 81       	ldd	r19, Z+1	; 0x01
 3b0:	62 9f       	mul	r22, r18
 3b2:	d0 01       	movw	r26, r0
 3b4:	63 9f       	mul	r22, r19
 3b6:	b0 0d       	add	r27, r0
 3b8:	11 24       	eor	r1, r1
 3ba:	22 81       	ldd	r18, Z+2	; 0x02
 3bc:	33 81       	ldd	r19, Z+3	; 0x03
 3be:	a2 0f       	add	r26, r18
 3c0:	b3 1f       	adc	r27, r19
 3c2:	aa 0f       	add	r26, r26
 3c4:	bb 1f       	adc	r27, r27
 3c6:	a6 51       	subi	r26, 0x16	; 22
 3c8:	bb 4e       	sbci	r27, 0xEB	; 235
 3ca:	4d 93       	st	X+, r20
 3cc:	5c 93       	st	X, r21
 3ce:	01 96       	adiw	r24, 0x01	; 1
 3d0:	36 96       	adiw	r30, 0x06	; 6
 3d2:	24 81       	ldd	r18, Z+4	; 0x04
 3d4:	35 81       	ldd	r19, Z+5	; 0x05
 3d6:	23 2b       	or	r18, r19
 3d8:	49 f7       	brne	.-46     	; 0x3ac <nearest_path_to_array+0x1a>
 3da:	02 c0       	rjmp	.+4      	; 0x3e0 <nearest_path_to_array+0x4e>
 3dc:	80 e0       	ldi	r24, 0x00	; 0
 3de:	90 e0       	ldi	r25, 0x00	; 0
 3e0:	9c 01       	movw	r18, r24
 3e2:	22 0f       	add	r18, r18
 3e4:	33 1f       	adc	r19, r19
 3e6:	f9 01       	movw	r30, r18
 3e8:	e8 0f       	add	r30, r24
 3ea:	f9 1f       	adc	r31, r25
 3ec:	ee 0f       	add	r30, r30
 3ee:	ff 1f       	adc	r31, r31
 3f0:	e0 50       	subi	r30, 0x00	; 0
 3f2:	ff 4f       	sbci	r31, 0xFF	; 255
 3f4:	40 81       	ld	r20, Z
 3f6:	51 81       	ldd	r21, Z+1	; 0x01
 3f8:	df 01       	movw	r26, r30
 3fa:	8d e1       	ldi	r24, 0x1D	; 29
 3fc:	84 9f       	mul	r24, r20
 3fe:	f0 01       	movw	r30, r0
 400:	85 9f       	mul	r24, r21
 402:	f0 0d       	add	r31, r0
 404:	11 24       	eor	r1, r1
 406:	12 96       	adiw	r26, 0x02	; 2
 408:	8d 91       	ld	r24, X+
 40a:	9c 91       	ld	r25, X
 40c:	13 97       	sbiw	r26, 0x03	; 3
 40e:	e8 0f       	add	r30, r24
 410:	f9 1f       	adc	r31, r25
 412:	ee 0f       	add	r30, r30
 414:	ff 1f       	adc	r31, r31
 416:	e6 51       	subi	r30, 0x16	; 22
 418:	fb 4e       	sbci	r31, 0xEB	; 235
 41a:	83 e0       	ldi	r24, 0x03	; 3
 41c:	90 e0       	ldi	r25, 0x00	; 0
 41e:	91 83       	std	Z+1, r25	; 0x01
 420:	80 83       	st	Z, r24
 422:	08 95       	ret

00000424 <back_at_start>:
 424:	2d e1       	ldi	r18, 0x1D	; 29
 426:	ac 01       	movw	r20, r24
 428:	24 9f       	mul	r18, r20
 42a:	c0 01       	movw	r24, r0
 42c:	25 9f       	mul	r18, r21
 42e:	90 0d       	add	r25, r0
 430:	11 24       	eor	r1, r1
 432:	68 0f       	add	r22, r24
 434:	79 1f       	adc	r23, r25
 436:	fb 01       	movw	r30, r22
 438:	ee 0f       	add	r30, r30
 43a:	ff 1f       	adc	r31, r31
 43c:	e6 5d       	subi	r30, 0xD6	; 214
 43e:	fe 4f       	sbci	r31, 0xFE	; 254
 440:	80 81       	ld	r24, Z
 442:	91 81       	ldd	r25, Z+1	; 0x01
 444:	04 97       	sbiw	r24, 0x04	; 4
 446:	19 f4       	brne	.+6      	; 0x44e <back_at_start+0x2a>
 448:	95 de       	rcall	.-726    	; 0x174 <robot_turn_around>
 44a:	81 e0       	ldi	r24, 0x01	; 1
 44c:	08 95       	ret
 44e:	80 e0       	ldi	r24, 0x00	; 0
 450:	08 95       	ret

00000452 <detect_wall>:
 452:	2d e1       	ldi	r18, 0x1D	; 29
 454:	ac 01       	movw	r20, r24
 456:	24 9f       	mul	r18, r20
 458:	c0 01       	movw	r24, r0
 45a:	25 9f       	mul	r18, r21
 45c:	90 0d       	add	r25, r0
 45e:	11 24       	eor	r1, r1
 460:	68 0f       	add	r22, r24
 462:	79 1f       	adc	r23, r25
 464:	fb 01       	movw	r30, r22
 466:	ee 0f       	add	r30, r30
 468:	ff 1f       	adc	r31, r31
 46a:	e6 5d       	subi	r30, 0xD6	; 214
 46c:	fe 4f       	sbci	r31, 0xFE	; 254
 46e:	20 81       	ld	r18, Z
 470:	31 81       	ldd	r19, Z+1	; 0x01
 472:	21 15       	cp	r18, r1
 474:	31 05       	cpc	r19, r1
 476:	61 f0       	breq	.+24     	; 0x490 <detect_wall+0x3e>
 478:	21 30       	cpi	r18, 0x01	; 1
 47a:	31 05       	cpc	r19, r1
 47c:	59 f0       	breq	.+22     	; 0x494 <detect_wall+0x42>
 47e:	22 30       	cpi	r18, 0x02	; 2
 480:	31 05       	cpc	r19, r1
 482:	51 f0       	breq	.+20     	; 0x498 <detect_wall+0x46>
 484:	81 e0       	ldi	r24, 0x01	; 1
 486:	24 30       	cpi	r18, 0x04	; 4
 488:	31 05       	cpc	r19, r1
 48a:	39 f4       	brne	.+14     	; 0x49a <detect_wall+0x48>
 48c:	80 e0       	ldi	r24, 0x00	; 0
 48e:	08 95       	ret
 490:	81 e0       	ldi	r24, 0x01	; 1
 492:	08 95       	ret
 494:	80 e0       	ldi	r24, 0x00	; 0
 496:	08 95       	ret
 498:	81 e0       	ldi	r24, 0x01	; 1
 49a:	08 95       	ret

0000049c <detect_outer_wall>:
 49c:	99 23       	and	r25, r25
 49e:	d4 f0       	brlt	.+52     	; 0x4d4 <detect_outer_wall+0x38>
 4a0:	77 23       	and	r23, r23
 4a2:	d4 f0       	brlt	.+52     	; 0x4d8 <detect_outer_wall+0x3c>
 4a4:	2d e1       	ldi	r18, 0x1D	; 29
 4a6:	28 9f       	mul	r18, r24
 4a8:	f0 01       	movw	r30, r0
 4aa:	29 9f       	mul	r18, r25
 4ac:	f0 0d       	add	r31, r0
 4ae:	11 24       	eor	r1, r1
 4b0:	6e 0f       	add	r22, r30
 4b2:	7f 1f       	adc	r23, r31
 4b4:	fb 01       	movw	r30, r22
 4b6:	ee 0f       	add	r30, r30
 4b8:	ff 1f       	adc	r31, r31
 4ba:	e6 5d       	subi	r30, 0xD6	; 214
 4bc:	fe 4f       	sbci	r31, 0xFE	; 254
 4be:	20 81       	ld	r18, Z
 4c0:	31 81       	ldd	r19, Z+1	; 0x01
 4c2:	25 30       	cpi	r18, 0x05	; 5
 4c4:	31 05       	cpc	r19, r1
 4c6:	51 f0       	breq	.+20     	; 0x4dc <detect_outer_wall+0x40>
 4c8:	81 e0       	ldi	r24, 0x01	; 1
 4ca:	24 30       	cpi	r18, 0x04	; 4
 4cc:	31 05       	cpc	r19, r1
 4ce:	39 f0       	breq	.+14     	; 0x4de <detect_outer_wall+0x42>
 4d0:	80 e0       	ldi	r24, 0x00	; 0
 4d2:	08 95       	ret
 4d4:	80 e0       	ldi	r24, 0x00	; 0
 4d6:	08 95       	ret
 4d8:	80 e0       	ldi	r24, 0x00	; 0
 4da:	08 95       	ret
 4dc:	81 e0       	ldi	r24, 0x01	; 1
 4de:	08 95       	ret

000004e0 <robot_move>:
 4e0:	80 91 c0 07 	lds	r24, 0x07C0
 4e4:	90 91 c1 07 	lds	r25, 0x07C1
 4e8:	7f de       	rcall	.-770    	; 0x1e8 <next_x_position>
 4ea:	90 93 bd 07 	sts	0x07BD, r25
 4ee:	80 93 bc 07 	sts	0x07BC, r24
 4f2:	80 91 c0 07 	lds	r24, 0x07C0
 4f6:	90 91 c1 07 	lds	r25, 0x07C1
 4fa:	67 de       	rcall	.-818    	; 0x1ca <next_y_position>
 4fc:	90 93 c5 07 	sts	0x07C5, r25
 500:	80 93 c4 07 	sts	0x07C4, r24
 504:	08 95       	ret

00000506 <set_coordinate_in_array>:
 506:	2d e1       	ldi	r18, 0x1D	; 29
 508:	fc 01       	movw	r30, r24
 50a:	2e 9f       	mul	r18, r30
 50c:	c0 01       	movw	r24, r0
 50e:	2f 9f       	mul	r18, r31
 510:	90 0d       	add	r25, r0
 512:	11 24       	eor	r1, r1
 514:	68 0f       	add	r22, r24
 516:	79 1f       	adc	r23, r25
 518:	fb 01       	movw	r30, r22
 51a:	ee 0f       	add	r30, r30
 51c:	ff 1f       	adc	r31, r31
 51e:	e8 5a       	subi	r30, 0xA8	; 168
 520:	f1 4f       	sbci	r31, 0xF1	; 241
 522:	51 83       	std	Z+1, r21	; 0x01
 524:	40 83       	st	Z, r20
 526:	08 95       	ret

00000528 <set_coordinate_in_NP_array>:
 528:	2d e1       	ldi	r18, 0x1D	; 29
 52a:	fc 01       	movw	r30, r24
 52c:	2e 9f       	mul	r18, r30
 52e:	c0 01       	movw	r24, r0
 530:	2f 9f       	mul	r18, r31
 532:	90 0d       	add	r25, r0
 534:	11 24       	eor	r1, r1
 536:	68 0f       	add	r22, r24
 538:	79 1f       	adc	r23, r25
 53a:	fb 01       	movw	r30, r22
 53c:	ee 0f       	add	r30, r30
 53e:	ff 1f       	adc	r31, r31
 540:	e6 51       	subi	r30, 0x16	; 22
 542:	fb 4e       	sbci	r31, 0xEB	; 235
 544:	51 83       	std	Z+1, r21	; 0x01
 546:	40 83       	st	Z, r20
 548:	08 95       	ret

0000054a <find_unknown_cells_after_detection_of_outer_walls>:
 54a:	2f 92       	push	r2
 54c:	3f 92       	push	r3
 54e:	4f 92       	push	r4
 550:	5f 92       	push	r5
 552:	6f 92       	push	r6
 554:	7f 92       	push	r7
 556:	8f 92       	push	r8
 558:	9f 92       	push	r9
 55a:	af 92       	push	r10
 55c:	bf 92       	push	r11
 55e:	cf 92       	push	r12
 560:	df 92       	push	r13
 562:	ef 92       	push	r14
 564:	ff 92       	push	r15
 566:	0f 93       	push	r16
 568:	1f 93       	push	r17
 56a:	cf 93       	push	r28
 56c:	df 93       	push	r29
 56e:	a0 e0       	ldi	r26, 0x00	; 0
 570:	b0 e0       	ldi	r27, 0x00	; 0
 572:	31 2c       	mov	r3, r1
 574:	21 2c       	mov	r2, r1
 576:	68 94       	set
 578:	44 24       	eor	r4, r4
 57a:	42 f8       	bld	r4, 2
 57c:	51 2c       	mov	r5, r1
 57e:	0f 2e       	mov	r0, r31
 580:	f5 e0       	ldi	r31, 0x05	; 5
 582:	8f 2e       	mov	r8, r31
 584:	91 2c       	mov	r9, r1
 586:	f0 2d       	mov	r31, r0
 588:	0f 2e       	mov	r0, r31
 58a:	f6 e0       	ldi	r31, 0x06	; 6
 58c:	6f 2e       	mov	r6, r31
 58e:	71 2c       	mov	r7, r1
 590:	f0 2d       	mov	r31, r0
 592:	68 94       	set
 594:	aa 24       	eor	r10, r10
 596:	a1 f8       	bld	r10, 1
 598:	b1 2c       	mov	r11, r1
 59a:	01 e0       	ldi	r16, 0x01	; 1
 59c:	10 e0       	ldi	r17, 0x00	; 0
 59e:	7d 01       	movw	r14, r26
 5a0:	71 c0       	rjmp	.+226    	; 0x684 <find_unknown_cells_after_detection_of_outer_walls+0x13a>
 5a2:	f6 01       	movw	r30, r12
 5a4:	e8 0f       	add	r30, r24
 5a6:	f9 1f       	adc	r31, r25
 5a8:	ee 0f       	add	r30, r30
 5aa:	ff 1f       	adc	r31, r31
 5ac:	ea 53       	subi	r30, 0x3A	; 58
 5ae:	f8 4f       	sbci	r31, 0xF8	; 248
 5b0:	20 81       	ld	r18, Z
 5b2:	31 81       	ldd	r19, Z+1	; 0x01
 5b4:	26 30       	cpi	r18, 0x06	; 6
 5b6:	31 05       	cpc	r19, r1
 5b8:	09 f0       	breq	.+2      	; 0x5bc <find_unknown_cells_after_detection_of_outer_walls+0x72>
 5ba:	58 c0       	rjmp	.+176    	; 0x66c <find_unknown_cells_after_detection_of_outer_walls+0x122>
 5bc:	ec 01       	movw	r28, r24
 5be:	21 96       	adiw	r28, 0x01	; 1
 5c0:	d6 01       	movw	r26, r12
 5c2:	ac 0f       	add	r26, r28
 5c4:	bd 1f       	adc	r27, r29
 5c6:	aa 0f       	add	r26, r26
 5c8:	bb 1f       	adc	r27, r27
 5ca:	aa 53       	subi	r26, 0x3A	; 58
 5cc:	b8 4f       	sbci	r27, 0xF8	; 248
 5ce:	bc 01       	movw	r22, r24
 5d0:	fd 01       	movw	r30, r26
 5d2:	ac 01       	movw	r20, r24
 5d4:	04 c0       	rjmp	.+8      	; 0x5de <find_unknown_cells_after_detection_of_outer_walls+0x94>
 5d6:	2d 31       	cpi	r18, 0x1D	; 29
 5d8:	31 05       	cpc	r19, r1
 5da:	0c f0       	brlt	.+2      	; 0x5de <find_unknown_cells_after_detection_of_outer_walls+0x94>
 5dc:	46 c0       	rjmp	.+140    	; 0x66a <find_unknown_cells_after_detection_of_outer_walls+0x120>
 5de:	9b 01       	movw	r18, r22
 5e0:	6f 5f       	subi	r22, 0xFF	; 255
 5e2:	7f 4f       	sbci	r23, 0xFF	; 255
 5e4:	81 91       	ld	r24, Z+
 5e6:	91 91       	ld	r25, Z+
 5e8:	06 97       	sbiw	r24, 0x06	; 6
 5ea:	a9 f7       	brne	.-22     	; 0x5d6 <find_unknown_cells_after_detection_of_outer_walls+0x8c>
 5ec:	ca 01       	movw	r24, r20
 5ee:	24 17       	cp	r18, r20
 5f0:	35 07       	cpc	r19, r21
 5f2:	e4 f1       	brlt	.+120    	; 0x66c <find_unknown_cells_after_detection_of_outer_walls+0x122>
 5f4:	cc 0d       	add	r28, r12
 5f6:	dd 1d       	adc	r29, r13
 5f8:	fe 01       	movw	r30, r28
 5fa:	ee 0f       	add	r30, r30
 5fc:	ff 1f       	adc	r31, r31
 5fe:	e6 5d       	subi	r30, 0xD6	; 214
 600:	fe 4f       	sbci	r31, 0xFE	; 254
 602:	01 96       	adiw	r24, 0x01	; 1
 604:	41 91       	ld	r20, Z+
 606:	51 91       	ld	r21, Z+
 608:	41 15       	cp	r20, r1
 60a:	51 05       	cpc	r21, r1
 60c:	79 f4       	brne	.+30     	; 0x62c <find_unknown_cells_after_detection_of_outer_walls+0xe2>
 60e:	e1 14       	cp	r14, r1
 610:	f1 04       	cpc	r15, r1
 612:	21 f0       	breq	.+8      	; 0x61c <find_unknown_cells_after_detection_of_outer_walls+0xd2>
 614:	4c e1       	ldi	r20, 0x1C	; 28
 616:	e4 16       	cp	r14, r20
 618:	f1 04       	cpc	r15, r1
 61a:	21 f4       	brne	.+8      	; 0x624 <find_unknown_cells_after_detection_of_outer_walls+0xda>
 61c:	11 96       	adiw	r26, 0x01	; 1
 61e:	1c 92       	st	X, r1
 620:	1e 92       	st	-X, r1
 622:	39 c0       	rjmp	.+114    	; 0x696 <find_unknown_cells_after_detection_of_outer_walls+0x14c>
 624:	11 96       	adiw	r26, 0x01	; 1
 626:	1c 93       	st	X, r17
 628:	0e 93       	st	-X, r16
 62a:	35 c0       	rjmp	.+106    	; 0x696 <find_unknown_cells_after_detection_of_outer_walls+0x14c>
 62c:	41 30       	cpi	r20, 0x01	; 1
 62e:	51 05       	cpc	r21, r1
 630:	21 f4       	brne	.+8      	; 0x63a <find_unknown_cells_after_detection_of_outer_walls+0xf0>
 632:	11 96       	adiw	r26, 0x01	; 1
 634:	bc 92       	st	X, r11
 636:	ae 92       	st	-X, r10
 638:	2e c0       	rjmp	.+92     	; 0x696 <find_unknown_cells_after_detection_of_outer_walls+0x14c>
 63a:	45 30       	cpi	r20, 0x05	; 5
 63c:	51 05       	cpc	r21, r1
 63e:	71 f4       	brne	.+28     	; 0x65c <find_unknown_cells_after_detection_of_outer_walls+0x112>
 640:	4d 91       	ld	r20, X+
 642:	5c 91       	ld	r21, X
 644:	11 97       	sbiw	r26, 0x01	; 1
 646:	14 16       	cp	r1, r20
 648:	15 06       	cpc	r1, r21
 64a:	24 f4       	brge	.+8      	; 0x654 <find_unknown_cells_after_detection_of_outer_walls+0x10a>
 64c:	11 96       	adiw	r26, 0x01	; 1
 64e:	7c 92       	st	X, r7
 650:	6e 92       	st	-X, r6
 652:	21 c0       	rjmp	.+66     	; 0x696 <find_unknown_cells_after_detection_of_outer_walls+0x14c>
 654:	11 96       	adiw	r26, 0x01	; 1
 656:	9c 92       	st	X, r9
 658:	8e 92       	st	-X, r8
 65a:	1d c0       	rjmp	.+58     	; 0x696 <find_unknown_cells_after_detection_of_outer_walls+0x14c>
 65c:	44 30       	cpi	r20, 0x04	; 4
 65e:	51 05       	cpc	r21, r1
 660:	d1 f4       	brne	.+52     	; 0x696 <find_unknown_cells_after_detection_of_outer_walls+0x14c>
 662:	11 96       	adiw	r26, 0x01	; 1
 664:	5c 92       	st	X, r5
 666:	4e 92       	st	-X, r4
 668:	16 c0       	rjmp	.+44     	; 0x696 <find_unknown_cells_after_detection_of_outer_walls+0x14c>
 66a:	ca 01       	movw	r24, r20
 66c:	01 96       	adiw	r24, 0x01	; 1
 66e:	8d 31       	cpi	r24, 0x1D	; 29
 670:	91 05       	cpc	r25, r1
 672:	0c f4       	brge	.+2      	; 0x676 <find_unknown_cells_after_detection_of_outer_walls+0x12c>
 674:	96 cf       	rjmp	.-212    	; 0x5a2 <find_unknown_cells_after_detection_of_outer_walls+0x58>
 676:	8f ef       	ldi	r24, 0xFF	; 255
 678:	e8 1a       	sub	r14, r24
 67a:	f8 0a       	sbc	r15, r24
 67c:	2d e1       	ldi	r18, 0x1D	; 29
 67e:	e2 16       	cp	r14, r18
 680:	f1 04       	cpc	r15, r1
 682:	79 f0       	breq	.+30     	; 0x6a2 <find_unknown_cells_after_detection_of_outer_walls+0x158>
 684:	83 2d       	mov	r24, r3
 686:	92 2d       	mov	r25, r2
 688:	4d e1       	ldi	r20, 0x1D	; 29
 68a:	4e 9d       	mul	r20, r14
 68c:	60 01       	movw	r12, r0
 68e:	4f 9d       	mul	r20, r15
 690:	d0 0c       	add	r13, r0
 692:	11 24       	eor	r1, r1
 694:	86 cf       	rjmp	.-244    	; 0x5a2 <find_unknown_cells_after_detection_of_outer_walls+0x58>
 696:	12 96       	adiw	r26, 0x02	; 2
 698:	28 17       	cp	r18, r24
 69a:	39 07       	cpc	r19, r25
 69c:	0c f0       	brlt	.+2      	; 0x6a0 <find_unknown_cells_after_detection_of_outer_walls+0x156>
 69e:	b1 cf       	rjmp	.-158    	; 0x602 <find_unknown_cells_after_detection_of_outer_walls+0xb8>
 6a0:	e5 cf       	rjmp	.-54     	; 0x66c <find_unknown_cells_after_detection_of_outer_walls+0x122>
 6a2:	df 91       	pop	r29
 6a4:	cf 91       	pop	r28
 6a6:	1f 91       	pop	r17
 6a8:	0f 91       	pop	r16
 6aa:	ff 90       	pop	r15
 6ac:	ef 90       	pop	r14
 6ae:	df 90       	pop	r13
 6b0:	cf 90       	pop	r12
 6b2:	bf 90       	pop	r11
 6b4:	af 90       	pop	r10
 6b6:	9f 90       	pop	r9
 6b8:	8f 90       	pop	r8
 6ba:	7f 90       	pop	r7
 6bc:	6f 90       	pop	r6
 6be:	5f 90       	pop	r5
 6c0:	4f 90       	pop	r4
 6c2:	3f 90       	pop	r3
 6c4:	2f 90       	pop	r2
 6c6:	08 95       	ret

000006c8 <robot_detect_outer_walls>:
 6c8:	ff 92       	push	r15
 6ca:	0f 93       	push	r16
 6cc:	1f 93       	push	r17
 6ce:	cf 93       	push	r28
 6d0:	df 93       	push	r29
 6d2:	25 dd       	rcall	.-1462   	; 0x11e <robot_turn_left>
 6d4:	05 df       	rcall	.-502    	; 0x4e0 <robot_move>
 6d6:	0f 2e       	mov	r0, r31
 6d8:	fd e1       	ldi	r31, 0x1D	; 29
 6da:	ff 2e       	mov	r15, r31
 6dc:	f0 2d       	mov	r31, r0
 6de:	06 e0       	ldi	r16, 0x06	; 6
 6e0:	10 e0       	ldi	r17, 0x00	; 0
 6e2:	7b c0       	rjmp	.+246    	; 0x7da <robot_detect_outer_walls+0x112>
 6e4:	80 91 c4 07 	lds	r24, 0x07C4
 6e8:	90 91 c5 07 	lds	r25, 0x07C5
 6ec:	f8 9e       	mul	r15, r24
 6ee:	f0 01       	movw	r30, r0
 6f0:	f9 9e       	mul	r15, r25
 6f2:	f0 0d       	add	r31, r0
 6f4:	11 24       	eor	r1, r1
 6f6:	80 91 bc 07 	lds	r24, 0x07BC
 6fa:	90 91 bd 07 	lds	r25, 0x07BD
 6fe:	e8 0f       	add	r30, r24
 700:	f9 1f       	adc	r31, r25
 702:	ee 0f       	add	r30, r30
 704:	ff 1f       	adc	r31, r31
 706:	ea 53       	subi	r30, 0x3A	; 58
 708:	f8 4f       	sbci	r31, 0xF8	; 248
 70a:	11 83       	std	Z+1, r17	; 0x01
 70c:	00 83       	st	Z, r16
 70e:	7b dd       	rcall	.-1290   	; 0x206 <right_x_pos>
 710:	ec 01       	movw	r28, r24
 712:	8b dd       	rcall	.-1258   	; 0x22a <right_y_pos>
 714:	be 01       	movw	r22, r28
 716:	c2 de       	rcall	.-636    	; 0x49c <detect_outer_wall>
 718:	88 23       	and	r24, r24
 71a:	19 f0       	breq	.+6      	; 0x722 <robot_detect_outer_walls+0x5a>
 71c:	d5 dc       	rcall	.-1622   	; 0xc8 <robot_turn_right>
 71e:	e0 de       	rcall	.-576    	; 0x4e0 <robot_move>
 720:	5c c0       	rjmp	.+184    	; 0x7da <robot_detect_outer_walls+0x112>
 722:	80 91 c0 07 	lds	r24, 0x07C0
 726:	90 91 c1 07 	lds	r25, 0x07C1
 72a:	5e dd       	rcall	.-1348   	; 0x1e8 <next_x_position>
 72c:	ec 01       	movw	r28, r24
 72e:	80 91 c0 07 	lds	r24, 0x07C0
 732:	90 91 c1 07 	lds	r25, 0x07C1
 736:	49 dd       	rcall	.-1390   	; 0x1ca <next_y_position>
 738:	be 01       	movw	r22, r28
 73a:	b0 de       	rcall	.-672    	; 0x49c <detect_outer_wall>
 73c:	88 23       	and	r24, r24
 73e:	11 f0       	breq	.+4      	; 0x744 <robot_detect_outer_walls+0x7c>
 740:	cf de       	rcall	.-610    	; 0x4e0 <robot_move>
 742:	4b c0       	rjmp	.+150    	; 0x7da <robot_detect_outer_walls+0x112>
 744:	8a dd       	rcall	.-1260   	; 0x25a <left_x_pos>
 746:	ec 01       	movw	r28, r24
 748:	9a dd       	rcall	.-1228   	; 0x27e <left_y_pos>
 74a:	be 01       	movw	r22, r28
 74c:	a7 de       	rcall	.-690    	; 0x49c <detect_outer_wall>
 74e:	88 23       	and	r24, r24
 750:	11 f0       	breq	.+4      	; 0x756 <robot_detect_outer_walls+0x8e>
 752:	e5 dc       	rcall	.-1590   	; 0x11e <robot_turn_left>
 754:	42 c0       	rjmp	.+132    	; 0x7da <robot_detect_outer_walls+0x112>
 756:	ab dd       	rcall	.-1194   	; 0x2ae <forward_to_left_x_pos>
 758:	ec 01       	movw	r28, r24
 75a:	c5 dd       	rcall	.-1142   	; 0x2e6 <forward_to_left_y_pos>
 75c:	be 01       	movw	r22, r28
 75e:	9e de       	rcall	.-708    	; 0x49c <detect_outer_wall>
 760:	88 23       	and	r24, r24
 762:	09 f4       	brne	.+2      	; 0x766 <robot_detect_outer_walls+0x9e>
 764:	3a c0       	rjmp	.+116    	; 0x7da <robot_detect_outer_walls+0x112>
 766:	bc de       	rcall	.-648    	; 0x4e0 <robot_move>
 768:	da dc       	rcall	.-1612   	; 0x11e <robot_turn_left>
 76a:	ba de       	rcall	.-652    	; 0x4e0 <robot_move>
 76c:	80 91 c4 07 	lds	r24, 0x07C4
 770:	90 91 c5 07 	lds	r25, 0x07C5
 774:	f8 9e       	mul	r15, r24
 776:	f0 01       	movw	r30, r0
 778:	f9 9e       	mul	r15, r25
 77a:	f0 0d       	add	r31, r0
 77c:	11 24       	eor	r1, r1
 77e:	80 91 bc 07 	lds	r24, 0x07BC
 782:	90 91 bd 07 	lds	r25, 0x07BD
 786:	e8 0f       	add	r30, r24
 788:	f9 1f       	adc	r31, r25
 78a:	ee 0f       	add	r30, r30
 78c:	ff 1f       	adc	r31, r31
 78e:	ea 53       	subi	r30, 0x3A	; 58
 790:	f8 4f       	sbci	r31, 0xF8	; 248
 792:	11 83       	std	Z+1, r17	; 0x01
 794:	00 83       	st	Z, r16
 796:	ee dc       	rcall	.-1572   	; 0x174 <robot_turn_around>
 798:	8a dd       	rcall	.-1260   	; 0x2ae <forward_to_left_x_pos>
 79a:	ec 01       	movw	r28, r24
 79c:	a4 dd       	rcall	.-1208   	; 0x2e6 <forward_to_left_y_pos>
 79e:	be 01       	movw	r22, r28
 7a0:	7d de       	rcall	.-774    	; 0x49c <detect_outer_wall>
 7a2:	88 23       	and	r24, r24
 7a4:	c9 f0       	breq	.+50     	; 0x7d8 <robot_detect_outer_walls+0x110>
 7a6:	9c de       	rcall	.-712    	; 0x4e0 <robot_move>
 7a8:	ba dc       	rcall	.-1676   	; 0x11e <robot_turn_left>
 7aa:	9a de       	rcall	.-716    	; 0x4e0 <robot_move>
 7ac:	80 91 c4 07 	lds	r24, 0x07C4
 7b0:	90 91 c5 07 	lds	r25, 0x07C5
 7b4:	f8 9e       	mul	r15, r24
 7b6:	f0 01       	movw	r30, r0
 7b8:	f9 9e       	mul	r15, r25
 7ba:	f0 0d       	add	r31, r0
 7bc:	11 24       	eor	r1, r1
 7be:	80 91 bc 07 	lds	r24, 0x07BC
 7c2:	90 91 bd 07 	lds	r25, 0x07BD
 7c6:	e8 0f       	add	r30, r24
 7c8:	f9 1f       	adc	r31, r25
 7ca:	ee 0f       	add	r30, r30
 7cc:	ff 1f       	adc	r31, r31
 7ce:	ea 53       	subi	r30, 0x3A	; 58
 7d0:	f8 4f       	sbci	r31, 0xF8	; 248
 7d2:	11 83       	std	Z+1, r17	; 0x01
 7d4:	00 83       	st	Z, r16
 7d6:	01 c0       	rjmp	.+2      	; 0x7da <robot_detect_outer_walls+0x112>
 7d8:	cd dc       	rcall	.-1638   	; 0x174 <robot_turn_around>
 7da:	80 91 c0 07 	lds	r24, 0x07C0
 7de:	90 91 c1 07 	lds	r25, 0x07C1
 7e2:	f3 dc       	rcall	.-1562   	; 0x1ca <next_y_position>
 7e4:	ec 01       	movw	r28, r24
 7e6:	80 91 c0 07 	lds	r24, 0x07C0
 7ea:	90 91 c1 07 	lds	r25, 0x07C1
 7ee:	fc dc       	rcall	.-1544   	; 0x1e8 <next_x_position>
 7f0:	fc 9e       	mul	r15, r28
 7f2:	90 01       	movw	r18, r0
 7f4:	fd 9e       	mul	r15, r29
 7f6:	30 0d       	add	r19, r0
 7f8:	11 24       	eor	r1, r1
 7fa:	82 0f       	add	r24, r18
 7fc:	93 1f       	adc	r25, r19
 7fe:	fc 01       	movw	r30, r24
 800:	ee 0f       	add	r30, r30
 802:	ff 1f       	adc	r31, r31
 804:	e6 5d       	subi	r30, 0xD6	; 214
 806:	fe 4f       	sbci	r31, 0xFE	; 254
 808:	80 81       	ld	r24, Z
 80a:	91 81       	ldd	r25, Z+1	; 0x01
 80c:	04 97       	sbiw	r24, 0x04	; 4
 80e:	09 f0       	breq	.+2      	; 0x812 <robot_detect_outer_walls+0x14a>
 810:	69 cf       	rjmp	.-302    	; 0x6e4 <robot_detect_outer_walls+0x1c>
 812:	80 91 c4 07 	lds	r24, 0x07C4
 816:	90 91 c5 07 	lds	r25, 0x07C5
 81a:	2d e1       	ldi	r18, 0x1D	; 29
 81c:	28 9f       	mul	r18, r24
 81e:	f0 01       	movw	r30, r0
 820:	29 9f       	mul	r18, r25
 822:	f0 0d       	add	r31, r0
 824:	11 24       	eor	r1, r1
 826:	80 91 bc 07 	lds	r24, 0x07BC
 82a:	90 91 bd 07 	lds	r25, 0x07BD
 82e:	e8 0f       	add	r30, r24
 830:	f9 1f       	adc	r31, r25
 832:	ee 0f       	add	r30, r30
 834:	ff 1f       	adc	r31, r31
 836:	ea 53       	subi	r30, 0x3A	; 58
 838:	f8 4f       	sbci	r31, 0xF8	; 248
 83a:	86 e0       	ldi	r24, 0x06	; 6
 83c:	90 e0       	ldi	r25, 0x00	; 0
 83e:	91 83       	std	Z+1, r25	; 0x01
 840:	80 83       	st	Z, r24
 842:	83 de       	rcall	.-762    	; 0x54a <find_unknown_cells_after_detection_of_outer_walls>
 844:	df 91       	pop	r29
 846:	cf 91       	pop	r28
 848:	1f 91       	pop	r17
 84a:	0f 91       	pop	r16
 84c:	ff 90       	pop	r15
 84e:	08 95       	ret

00000850 <save_detected_walls_in_array>:
	
void save_detected_walls_in_array() //saves detected walls  as 5 and detected free space as 1 in array
{
 850:	1f 93       	push	r17
 852:	cf 93       	push	r28
 854:	df 93       	push	r29
	}
}

void set_coordinate_in_array(int y, int x, int value) //sets coordinate in array to value
{
	robot_array[y][x] = value;
 856:	80 91 c4 07 	lds	r24, 0x07C4
 85a:	90 91 c5 07 	lds	r25, 0x07C5
 85e:	1d e1       	ldi	r17, 0x1D	; 29
 860:	18 9f       	mul	r17, r24
 862:	f0 01       	movw	r30, r0
 864:	19 9f       	mul	r17, r25
 866:	f0 0d       	add	r31, r0
 868:	11 24       	eor	r1, r1
 86a:	80 91 bc 07 	lds	r24, 0x07BC
 86e:	90 91 bd 07 	lds	r25, 0x07BD
 872:	e8 0f       	add	r30, r24
 874:	f9 1f       	adc	r31, r25
 876:	ee 0f       	add	r30, r30
 878:	ff 1f       	adc	r31, r31
 87a:	e8 5a       	subi	r30, 0xA8	; 168
 87c:	f1 4f       	sbci	r31, 0xF1	; 241
 87e:	81 e0       	ldi	r24, 0x01	; 1
 880:	90 e0       	ldi	r25, 0x00	; 0
 882:	91 83       	std	Z+1, r25	; 0x01
 884:	80 83       	st	Z, r24
	
void save_detected_walls_in_array() //saves detected walls  as 5 and detected free space as 1 in array
{
	set_coordinate_in_array(ypos, xpos, 1);
	//if(right_distance < 150)
	if(map_array[right_y_pos()][right_x_pos()] >= 5)
 886:	d1 dc       	rcall	.-1630   	; 0x22a <right_y_pos>
 888:	ec 01       	movw	r28, r24
 88a:	bd dc       	rcall	.-1670   	; 0x206 <right_x_pos>
 88c:	1c 9f       	mul	r17, r28
 88e:	90 01       	movw	r18, r0
 890:	1d 9f       	mul	r17, r29
 892:	30 0d       	add	r19, r0
 894:	11 24       	eor	r1, r1
 896:	82 0f       	add	r24, r18
 898:	93 1f       	adc	r25, r19
 89a:	fc 01       	movw	r30, r24
 89c:	ee 0f       	add	r30, r30
 89e:	ff 1f       	adc	r31, r31
 8a0:	e6 5d       	subi	r30, 0xD6	; 214
 8a2:	fe 4f       	sbci	r31, 0xFE	; 254
 8a4:	80 81       	ld	r24, Z
 8a6:	91 81       	ldd	r25, Z+1	; 0x01
 8a8:	05 97       	sbiw	r24, 0x05	; 5
 8aa:	a4 f0       	brlt	.+40     	; 0x8d4 <save_detected_walls_in_array+0x84>
	{
		set_coordinate_in_array(right_y_pos(), right_x_pos(), 5);	
 8ac:	ac dc       	rcall	.-1704   	; 0x206 <right_x_pos>
 8ae:	ec 01       	movw	r28, r24
 8b0:	bc dc       	rcall	.-1672   	; 0x22a <right_y_pos>
	}
}

void set_coordinate_in_array(int y, int x, int value) //sets coordinate in array to value
{
	robot_array[y][x] = value;
 8b2:	2d e1       	ldi	r18, 0x1D	; 29
 8b4:	ac 01       	movw	r20, r24
 8b6:	24 9f       	mul	r18, r20
 8b8:	c0 01       	movw	r24, r0
 8ba:	25 9f       	mul	r18, r21
 8bc:	90 0d       	add	r25, r0
 8be:	11 24       	eor	r1, r1
 8c0:	c8 0f       	add	r28, r24
 8c2:	d9 1f       	adc	r29, r25
 8c4:	cc 0f       	add	r28, r28
 8c6:	dd 1f       	adc	r29, r29
 8c8:	c8 5a       	subi	r28, 0xA8	; 168
 8ca:	d1 4f       	sbci	r29, 0xF1	; 241
 8cc:	85 e0       	ldi	r24, 0x05	; 5
 8ce:	90 e0       	ldi	r25, 0x00	; 0
 8d0:	99 83       	std	Y+1, r25	; 0x01
 8d2:	88 83       	st	Y, r24
	if(map_array[right_y_pos()][right_x_pos()] >= 5)
	{
		set_coordinate_in_array(right_y_pos(), right_x_pos(), 5);	
	}
	//if(left_distance < 150)
	if(map_array[left_y_pos()][left_x_pos()] >= 5)
 8d4:	d4 dc       	rcall	.-1624   	; 0x27e <left_y_pos>
 8d6:	ec 01       	movw	r28, r24
 8d8:	c0 dc       	rcall	.-1664   	; 0x25a <left_x_pos>
 8da:	4d e1       	ldi	r20, 0x1D	; 29
 8dc:	4c 9f       	mul	r20, r28
 8de:	90 01       	movw	r18, r0
 8e0:	4d 9f       	mul	r20, r29
 8e2:	30 0d       	add	r19, r0
 8e4:	11 24       	eor	r1, r1
 8e6:	82 0f       	add	r24, r18
 8e8:	93 1f       	adc	r25, r19
 8ea:	fc 01       	movw	r30, r24
 8ec:	ee 0f       	add	r30, r30
 8ee:	ff 1f       	adc	r31, r31
 8f0:	e6 5d       	subi	r30, 0xD6	; 214
 8f2:	fe 4f       	sbci	r31, 0xFE	; 254
 8f4:	80 81       	ld	r24, Z
 8f6:	91 81       	ldd	r25, Z+1	; 0x01
 8f8:	05 97       	sbiw	r24, 0x05	; 5
 8fa:	a4 f0       	brlt	.+40     	; 0x924 <save_detected_walls_in_array+0xd4>
	{
		set_coordinate_in_array(left_y_pos(), left_x_pos(), 5);
 8fc:	ae dc       	rcall	.-1700   	; 0x25a <left_x_pos>
 8fe:	ec 01       	movw	r28, r24
 900:	be dc       	rcall	.-1668   	; 0x27e <left_y_pos>
	}
}

void set_coordinate_in_array(int y, int x, int value) //sets coordinate in array to value
{
	robot_array[y][x] = value;
 902:	2d e1       	ldi	r18, 0x1D	; 29
 904:	ac 01       	movw	r20, r24
 906:	24 9f       	mul	r18, r20
 908:	c0 01       	movw	r24, r0
 90a:	25 9f       	mul	r18, r21
 90c:	90 0d       	add	r25, r0
 90e:	11 24       	eor	r1, r1
 910:	c8 0f       	add	r28, r24
 912:	d9 1f       	adc	r29, r25
 914:	cc 0f       	add	r28, r28
 916:	dd 1f       	adc	r29, r29
 918:	c8 5a       	subi	r28, 0xA8	; 168
 91a:	d1 4f       	sbci	r29, 0xF1	; 241
 91c:	85 e0       	ldi	r24, 0x05	; 5
 91e:	90 e0       	ldi	r25, 0x00	; 0
 920:	99 83       	std	Y+1, r25	; 0x01
 922:	88 83       	st	Y, r24
	//if(left_distance < 150)
	if(map_array[left_y_pos()][left_x_pos()] >= 5)
	{
		set_coordinate_in_array(left_y_pos(), left_x_pos(), 5);
	}
	if(map_array[right_y_pos()][right_x_pos()] == 1)
 924:	82 dc       	rcall	.-1788   	; 0x22a <right_y_pos>
 926:	ec 01       	movw	r28, r24
 928:	6e dc       	rcall	.-1828   	; 0x206 <right_x_pos>
 92a:	4d e1       	ldi	r20, 0x1D	; 29
 92c:	4c 9f       	mul	r20, r28
 92e:	90 01       	movw	r18, r0
 930:	4d 9f       	mul	r20, r29
 932:	30 0d       	add	r19, r0
 934:	11 24       	eor	r1, r1
 936:	82 0f       	add	r24, r18
 938:	93 1f       	adc	r25, r19
 93a:	fc 01       	movw	r30, r24
 93c:	ee 0f       	add	r30, r30
 93e:	ff 1f       	adc	r31, r31
 940:	e6 5d       	subi	r30, 0xD6	; 214
 942:	fe 4f       	sbci	r31, 0xFE	; 254
 944:	80 81       	ld	r24, Z
 946:	91 81       	ldd	r25, Z+1	; 0x01
 948:	01 97       	sbiw	r24, 0x01	; 1
 94a:	a1 f4       	brne	.+40     	; 0x974 <save_detected_walls_in_array+0x124>
	{
		set_coordinate_in_array(right_y_pos(), right_x_pos(), 1);
 94c:	5c dc       	rcall	.-1864   	; 0x206 <right_x_pos>
 94e:	ec 01       	movw	r28, r24
 950:	6c dc       	rcall	.-1832   	; 0x22a <right_y_pos>
	}
}

void set_coordinate_in_array(int y, int x, int value) //sets coordinate in array to value
{
	robot_array[y][x] = value;
 952:	2d e1       	ldi	r18, 0x1D	; 29
 954:	ac 01       	movw	r20, r24
 956:	24 9f       	mul	r18, r20
 958:	c0 01       	movw	r24, r0
 95a:	25 9f       	mul	r18, r21
 95c:	90 0d       	add	r25, r0
 95e:	11 24       	eor	r1, r1
 960:	c8 0f       	add	r28, r24
 962:	d9 1f       	adc	r29, r25
 964:	cc 0f       	add	r28, r28
 966:	dd 1f       	adc	r29, r29
 968:	c8 5a       	subi	r28, 0xA8	; 168
 96a:	d1 4f       	sbci	r29, 0xF1	; 241
 96c:	81 e0       	ldi	r24, 0x01	; 1
 96e:	90 e0       	ldi	r25, 0x00	; 0
 970:	99 83       	std	Y+1, r25	; 0x01
 972:	88 83       	st	Y, r24
	}
	if(map_array[right_y_pos()][right_x_pos()] == 1)
	{
		set_coordinate_in_array(right_y_pos(), right_x_pos(), 1);
	}
	if(map_array[left_y_pos()][left_x_pos()] == 1)
 974:	84 dc       	rcall	.-1784   	; 0x27e <left_y_pos>
 976:	ec 01       	movw	r28, r24
 978:	70 dc       	rcall	.-1824   	; 0x25a <left_x_pos>
 97a:	4d e1       	ldi	r20, 0x1D	; 29
 97c:	4c 9f       	mul	r20, r28
 97e:	90 01       	movw	r18, r0
 980:	4d 9f       	mul	r20, r29
 982:	30 0d       	add	r19, r0
 984:	11 24       	eor	r1, r1
 986:	82 0f       	add	r24, r18
 988:	93 1f       	adc	r25, r19
 98a:	fc 01       	movw	r30, r24
 98c:	ee 0f       	add	r30, r30
 98e:	ff 1f       	adc	r31, r31
 990:	e6 5d       	subi	r30, 0xD6	; 214
 992:	fe 4f       	sbci	r31, 0xFE	; 254
 994:	80 81       	ld	r24, Z
 996:	91 81       	ldd	r25, Z+1	; 0x01
 998:	01 97       	sbiw	r24, 0x01	; 1
 99a:	a1 f4       	brne	.+40     	; 0x9c4 <save_detected_walls_in_array+0x174>
	{
		set_coordinate_in_array(left_y_pos(), left_x_pos(), 1);
 99c:	5e dc       	rcall	.-1860   	; 0x25a <left_x_pos>
 99e:	ec 01       	movw	r28, r24
 9a0:	6e dc       	rcall	.-1828   	; 0x27e <left_y_pos>
	}
}

void set_coordinate_in_array(int y, int x, int value) //sets coordinate in array to value
{
	robot_array[y][x] = value;
 9a2:	2d e1       	ldi	r18, 0x1D	; 29
 9a4:	ac 01       	movw	r20, r24
 9a6:	24 9f       	mul	r18, r20
 9a8:	c0 01       	movw	r24, r0
 9aa:	25 9f       	mul	r18, r21
 9ac:	90 0d       	add	r25, r0
 9ae:	11 24       	eor	r1, r1
 9b0:	c8 0f       	add	r28, r24
 9b2:	d9 1f       	adc	r29, r25
 9b4:	cc 0f       	add	r28, r28
 9b6:	dd 1f       	adc	r29, r29
 9b8:	c8 5a       	subi	r28, 0xA8	; 168
 9ba:	d1 4f       	sbci	r29, 0xF1	; 241
 9bc:	81 e0       	ldi	r24, 0x01	; 1
 9be:	90 e0       	ldi	r25, 0x00	; 0
 9c0:	99 83       	std	Y+1, r25	; 0x01
 9c2:	88 83       	st	Y, r24
	}
	if(map_array[left_y_pos()][left_x_pos()] == 1)
	{
		set_coordinate_in_array(left_y_pos(), left_x_pos(), 1);
	}
}
 9c4:	df 91       	pop	r29
 9c6:	cf 91       	pop	r28
 9c8:	1f 91       	pop	r17
 9ca:	08 95       	ret

000009cc <robot_keep_right>:

//As long as we don't find a wall ahead or a clear at the right hand side, the robot keeps moving forward 
//BUT! if we first off, find a clear way to travel to the right, we turn right and if we find a wall we 
//clearly have to turn left
void robot_keep_right()
{
 9cc:	cf 93       	push	r28
 9ce:	df 93       	push	r29
	while(back_at_start(ypos, xpos) == false)
 9d0:	38 c0       	rjmp	.+112    	; 0xa42 <robot_keep_right+0x76>
	{
		save_detected_walls_in_array();
 9d2:	3e df       	rcall	.-388    	; 0x850 <save_detected_walls_in_array>
		if(detect_wall(right_y_pos(), right_x_pos())) //as long as we have wall to the right
 9d4:	18 dc       	rcall	.-2000   	; 0x206 <right_x_pos>
 9d6:	ec 01       	movw	r28, r24
 9d8:	28 dc       	rcall	.-1968   	; 0x22a <right_y_pos>
 9da:	be 01       	movw	r22, r28
 9dc:	3a dd       	rcall	.-1420   	; 0x452 <detect_wall>
 9de:	88 23       	and	r24, r24
 9e0:	29 f1       	breq	.+74     	; 0xa2c <robot_keep_right+0x60>
		{ 
			if(!(detect_wall(next_y_position(direction), next_x_position(direction)))) //and no wall in front of robot
 9e2:	80 91 c0 07 	lds	r24, 0x07C0
 9e6:	90 91 c1 07 	lds	r25, 0x07C1
 9ea:	fe db       	rcall	.-2052   	; 0x1e8 <next_x_position>
 9ec:	ec 01       	movw	r28, r24
 9ee:	80 91 c0 07 	lds	r24, 0x07C0
 9f2:	90 91 c1 07 	lds	r25, 0x07C1
 9f6:	e9 db       	rcall	.-2094   	; 0x1ca <next_y_position>
 9f8:	be 01       	movw	r22, r28
 9fa:	2b dd       	rcall	.-1450   	; 0x452 <detect_wall>
 9fc:	81 11       	cpse	r24, r1
 9fe:	0b c0       	rjmp	.+22     	; 0xa16 <robot_keep_right+0x4a>
			{ 
				robot_move(); 
 a00:	6f dd       	rcall	.-1314   	; 0x4e0 <robot_move>
				back_at_start(ypos, xpos);
 a02:	60 91 bc 07 	lds	r22, 0x07BC
 a06:	70 91 bd 07 	lds	r23, 0x07BD
 a0a:	80 91 c4 07 	lds	r24, 0x07C4
 a0e:	90 91 c5 07 	lds	r25, 0x07C5
 a12:	08 dd       	rcall	.-1520   	; 0x424 <back_at_start>
 a14:	16 c0       	rjmp	.+44     	; 0xa42 <robot_keep_right+0x76>
			}
			else
			{
				if(detect_wall(left_y_pos(), left_x_pos()))
 a16:	21 dc       	rcall	.-1982   	; 0x25a <left_x_pos>
 a18:	ec 01       	movw	r28, r24
 a1a:	31 dc       	rcall	.-1950   	; 0x27e <left_y_pos>
 a1c:	be 01       	movw	r22, r28
 a1e:	19 dd       	rcall	.-1486   	; 0x452 <detect_wall>
 a20:	88 23       	and	r24, r24
 a22:	11 f0       	breq	.+4      	; 0xa28 <robot_keep_right+0x5c>
				{ 
					robot_turn_around();	//if wall to all sides except back, then turn around	
 a24:	a7 db       	rcall	.-2226   	; 0x174 <robot_turn_around>
 a26:	0d c0       	rjmp	.+26     	; 0xa42 <robot_keep_right+0x76>
				}
				else
				{
					robot_turn_left(); //if wall in front of robot and wall to the right then turn left
 a28:	7a db       	rcall	.-2316   	; 0x11e <robot_turn_left>
 a2a:	0b c0       	rjmp	.+22     	; 0xa42 <robot_keep_right+0x76>
				}
			}
		}
		else
		{
 			robot_turn_right(); //turn right when possible
 a2c:	4d db       	rcall	.-2406   	; 0xc8 <robot_turn_right>
			robot_move(); //then move forward
 a2e:	58 dd       	rcall	.-1360   	; 0x4e0 <robot_move>
			back_at_start(ypos, xpos);
 a30:	60 91 bc 07 	lds	r22, 0x07BC
 a34:	70 91 bd 07 	lds	r23, 0x07BD
 a38:	80 91 c4 07 	lds	r24, 0x07C4
 a3c:	90 91 c5 07 	lds	r25, 0x07C5
 a40:	f1 dc       	rcall	.-1566   	; 0x424 <back_at_start>
//As long as we don't find a wall ahead or a clear at the right hand side, the robot keeps moving forward 
//BUT! if we first off, find a clear way to travel to the right, we turn right and if we find a wall we 
//clearly have to turn left
void robot_keep_right()
{
	while(back_at_start(ypos, xpos) == false)
 a42:	60 91 bc 07 	lds	r22, 0x07BC
 a46:	70 91 bd 07 	lds	r23, 0x07BD
 a4a:	80 91 c4 07 	lds	r24, 0x07C4
 a4e:	90 91 c5 07 	lds	r25, 0x07C5
 a52:	e8 dc       	rcall	.-1584   	; 0x424 <back_at_start>
 a54:	88 23       	and	r24, r24
 a56:	09 f4       	brne	.+2      	; 0xa5a <robot_keep_right+0x8e>
 a58:	bc cf       	rjmp	.-136    	; 0x9d2 <robot_keep_right+0x6>
 			robot_turn_right(); //turn right when possible
			robot_move(); //then move forward
			back_at_start(ypos, xpos);
		}
	}
	robot_detect_outer_walls(); // THIS NEEDS TO BE RUN WITHOUT ACTUALLY CHANGING ROBOTS POSITION
 a5a:	36 de       	rcall	.-916    	; 0x6c8 <robot_detect_outer_walls>
}
 a5c:	df 91       	pop	r29
 a5e:	cf 91       	pop	r28
 a60:	08 95       	ret

00000a62 <_exit>:
 a62:	f8 94       	cli

00000a64 <__stop_program>:
 a64:	ff cf       	rjmp	.-2      	; 0xa64 <__stop_program>
